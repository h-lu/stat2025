---
title: "第三周实验：`dplyr` 进阶与 `tidyr` 数据整形"

---

## 1. 目标

本实验旨在熟练掌握 `dplyr` 包中更高级的数据转换函数，并使用 `tidyr` 包进行数据整形，同时练习处理缺失值和使用管道连接操作。

-   熟练使用 `dplyr::mutate()` 创建和修改列。
-   熟练使用 `dplyr::arrange()` 对数据进行排序。
-   掌握 `dplyr::group_by()` 和 `dplyr::summarise()` 进行分组汇总计算。
-   理解整洁数据 (Tidy Data) 的概念。
-   使用 `tidyr::pivot_longer()` 将宽数据转换为长数据。
-   使用 `tidyr::pivot_wider()` 将长数据转换为宽数据。
-   练习识别和处理缺失值 (NA)。
-   熟练运用管道 (`%>%`) 串联多个数据处理步骤。

## 2. 数据准备

我们将继续使用上周的 `grades.csv` 数据，并引入一个新的数据集 `exam_attempts.csv` 来练习 `pivot_longer` 和 `pivot_wider`。

**`grades.csv` (回顾):**

``` csv
StudentID,Name,Major,Exam1,Exam2,FinalProject,Attendance
S001,Alice,Statistics,85,88,92,Present
S002,Bob,CompSci,92,NA,85,Present
S003,Charlie,Math,78,82,75,Absent
S004,David,Statistics,88,90,95,Present
S005,Eve,CompSci,75,80,NA,Absent
S006,Frank,Statistics,95,98,96,Present
S007,Grace,Math,NA,75,80,Present
S008,Heidi,CompSci,81,84,88,Present
```

**`exam_attempts.csv` 文件内容:**

``` csv
StudentID,Attempt1_Score,Attempt1_Time,Attempt2_Score,Attempt2_Time
S001,85,50,88,45
S002,92,60,NA,NA
S003,78,55,82,50
S004,88,48,90,42
```

**任务:** 

1. 确保 `grades.csv` 文件在你的工作目录中。
2. 创建 `exam_attempts.csv` 文件并保存在工作目录。
3. 加载 `tidyverse` 包。
4. 读入 `grades.csv` 到 `grades_data`。
5. 读入 `exam_attempts.csv` 到 `attempts_data`。


## 3. `dplyr` 进阶练习

### 3.1 `mutate()`

**任务:** 使用 `grades_data`：

1. 计算 `Exam1` 和 `Exam2` 的平均分（忽略 NA），并将结果存储在新列 `AvgExamScore` 中。
2. 创建一个新列 `FinalGrade`，假设最终成绩计算方式为：`Exam1 * 0.3 + Exam2 * 0.3 + FinalProject * 0.4`。注意处理 NA 值（如果任一成绩为 NA，则 `FinalGrade` 也应为 NA）。
3. 创建一个逻辑列 `PassedExam1`，表示 `Exam1` 成绩是否大于等于 60 (假设 60 分及格)。



### 3.2 `arrange()`

**任务:** 使用 `grades_data_mutated`：

1. 按 `FinalGrade` **降序**排列学生。
2. 先按 `Major` 字母顺序排列，然后在每个专业内按 `Exam1` **升序**排列。



### 3.3 `group_by()` 与 `summarise()`

**任务:** 使用 `grades_data`：

1. 计算每个 `Major` 的学生人数。
2. 计算每个 `Major` 的 `Exam1` 平均分和 `FinalProject` 平均分（忽略 NA）。
3. 找出每个 `Major` 中 `Exam1` 的最高分。
4. 计算 `Attendance` 为 "Present" 和 "Absent" 的学生人数分别是多少。


## 4. `tidyr` 数据整形练习

### 4.1 `pivot_longer()`

`attempts_data` 目前是“宽”格式，每次尝试的成绩和时间分布在不同的列中。我们希望将其转换为“长”格式，每行代表一次尝试。

**任务:** 将 `attempts_data` 转换为长格式，包含以下列：

-   `StudentID`
-   `Attempt` (值为 1 或 2)
-   `Score` (对应尝试的得分)
-   `Time` (对应尝试的时间)



### 4.2 `pivot_wider()`

**任务:** 将刚刚创建的长格式数据 `attempts_long` 转换回原来的宽格式。



## 5. 处理缺失值 (NA)

**任务:** 使用 `grades_data`：

1. 计算 `Exam2` 列有多少个缺失值。
2. 创建一个新数据框 `grades_no_na_exam2`，移除 `Exam2` 列包含 NA 的所有行。
3. 创建一个新数据框 `grades_filled_project`，将 `FinalProject` 列中的 NA 替换为该列的**中位数**。


## 6. 综合链式操作 (`%>%`)

**任务:** 使用 `grades_data`，通过一步链式操作完成以下任务：

1. 筛选出 `Major` 为 "Statistics" 或 "Math" 的学生。
2. 计算这些学生的 `Exam1` 和 `Exam2` 的平均分（忽略 NA），命名为 `AvgExamScore`。
3. 只保留 `StudentID`, `Name`, `Major`, 和 `AvgExamScore` 这几列。 
4. 按 `AvgExamScore` 降序排列结果。

## 7. 实验总结

在本实验中，我们深入练习了 `dplyr` 的核心数据转换函数 `mutate`, `arrange`, `group_by`, `summarise`，并掌握了使用 `tidyr` 的 `pivot_longer` 和 `pivot_wider` 在长宽数据格式间转换。我们还练习了处理缺失值的常用方法，并通过管道将这些操作流畅地组合起来。熟练掌握这些 `tidyverse` 技能对于高效地进行数据清理和准备至关重要。