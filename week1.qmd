---
title: "第一周：统计学导论"
---

::: {.callout-tip appearance="simple"}
## 本周学习目标
- 了解课程和项目式教学模式
- 掌握统计学的基本概念，理解统计思维的重要性
- 初步了解R语言和tidyverse生态系统
- 学习R环境搭建和tidyverse安装
- 掌握基本的数据获取方法，包括公开数据集和API
- 初步体验 AI 辅助编程，并使用 AI 工具进行简单的 R 编程练习
:::

## 第一次课：课程和项目介绍 + 统计学导论

::: {.callout-important}
## 核心概念
统计学是从数据中提取信息，发现规律，并做出合理决策的科学。
:::

### 1. 课程和项目介绍

#### 课程和项目概览

##### 课程总体目标
- 通过四个项目，学习和应用统计知识。

##### 项目式教学
- 强调以项目为驱动，学生通过完成实际项目来学习。

##### 项目一：数据探索与初步洞察
- **目标**： 掌握数据探索的基本方法，获得初步的数据洞察。
- **主题选择**： 电影、音乐、游戏、股票等 (学生自选)。
- **项目周期**： 第1-4周。
- **成果要求**：  分析报告和项目汇报。

##### 分组
- 现场自由组队，每组2-3人。

### 2. 统计学基本概念

#### 什么是统计学？
- **定义**：研究如何收集、分析、解释和呈现数据的科学。
- **目标**：从数据中提取信息，发现规律，做出决策。
- **应用案例**： 经管领域案例 (结合学生专业背景)，例如市场调查、销售数据分析、财务报表分析等。 此外，统计学也被广泛应用于自然科学、社会科学、医学、工程等领域。

#### 统计学的基本概念

::: {.callout-tip appearance="simple"}
##### 总体 (Population) 与 样本 (Sample)
- **总体**： 研究对象的全体。例如，如果我们想研究某个城市所有成年人的平均身高，那么该城市所有成年人就是一个总体。
- **样本**： 从总体中抽取的一部分个体。由于直接测量所有成年人的身高是不现实的，我们通常会抽取一部分成年人作为样本进行测量。
:::

::: {.callout-tip appearance="simple"}
##### 变量 (Variable) 的类型
- **分类变量 (Categorical)**：  描述类别或属性，如性别、地区。例如，血型 (A, B, AB, O)、教育程度 (小学, 初中, 高中, 大学) 等。 分类变量的取值是离散的类别，通常不能进行数值运算。
- **数值变量 (Numerical)**：  可以数值度量的变量，如身高、收入。例如，年龄、体重、考试成绩等。 数值变量的取值是数值，可以进行数学运算。 数值变量又可以分为**离散型变量 (discrete)** 和**连续型变量 (continuous)**。
:::

::: {.callout-tip appearance="simple"}
##### 描述性统计 (Descriptive Statistics) 与 推断性统计 (Inferential Statistics)
- **描述性统计**： 描述和总结样本数据的特征，如均值、标准差、图表。描述性统计旨在概括和呈现数据的基本特征，例如使用平均数描述数据的中心位置，使用标准差描述数据的离散程度，使用直方图或条形图可视化数据的分布。
- **推断性统计**：  利用样本数据推断总体特征，如参数估计、假设检验。推断性统计则更进一步，它利用样本数据的信息来对总体进行推断，例如通过样本的平均身高来估计总体成年人的平均身高，或者通过假设检验来判断某种新药是否有效。
:::

#### 统计思维的重要性
- **核心思想**： 如何从数据中提取信息，发现规律，做出决策。统计思维不仅仅是一种分析数据的技能，更是一种看待问题和解决问题的思维方式。 具备统计思维的人能够更加理性地分析问题，更加科学地做出决策，从而在工作和生活中取得更大的成功。 在当今这个数据爆炸的时代，统计思维显得尤为重要。

### 3. R语言和tidyverse简介

#### R语言和tidyverse生态系统

##### R语言的特点和优势
- 开源、免费。
- 强大的统计分析和可视化功能。
- 活跃的社区和丰富的扩展包。

##### tidyverse生态系统
- 核心包： `dplyr` (数据处理), `ggplot2` (数据可视化), `readr` (数据导入), `tidyr` (数据整理) 等。
- 简洁、高效、易读的语法风格。
- 统一的数据处理流程 (管道操作符 `%>%`)。

##### 为什么选择tidyverse?
- 更符合现代数据分析的习惯。
- 提高数据处理和分析效率。

## 第二次课：R环境搭建与R基础语法

### 1. R及RStudio/Cursor安装

#### R 环境安装

##### 下载R
- 访问 [R官方网站](https://www.r-project.org/)，根据操作系统选择合适的R版本下载并安装。
- 建议安装最新版本的R。

##### VSCode (可选，推荐)
- 访问 [VSCode官网](https://code.visualstudio.com/)，下载并安装VSCode。
- 如果选择VSCode，需要安装R语言和AI相关的插件以获得更好的R语言编程体验。

##### 安装Cursor (可选，推荐)
- 访问 [Cursor官网](https://cursor.sh/)，下载并安装Cursor。
- Cursor 是一个支持AI辅助编程的代码编辑器，可以作为VSCode的替代品，提供更强大的AI代码生成和编辑功能。

##### 安装RStudio Desktop (可选)
- 访问 [RStudio Desktop官网](https://posit.co/products/open-source/rstudio/)，下载并安装RStudio Desktop。
- RStudio是一个集成开发环境 (IDE)，提供更友好的R语言编程界面。


### 2. VSCode/Cursor 插件安装

#### VSCode/Cursor 插件配置

##### 安装R插件 (VSCode 或 Cursor)
- 打开 VSCode 或 Cursor，进入扩展市场 (Extensions)。
- 搜索 "R" 插件 (R Extension for Visual Studio Code) 并安装。
- 安装 R 插件后，VSCode 或 Cursor 可以提供 R 代码的语法高亮、代码补全、调试等功能。

##### 安装 AI 辅助插件 (VSCode 或 Cursor)
- **GitHub Copilot (推荐)**：  在 VSCode 或 Cursor 扩展市场搜索 "GitHub Copilot" 并安装。  安装后可能需要登录GitHub账号并进行配置。
- **通义灵码 (可选)**：  在 VSCode 或 Cursor 扩展市场搜索 "TONGYI Lingma" 并安装。  安装后可能需要登录通义账号并进行配置。
- **Cursor 内置 AI 功能**：  Cursor 编辑器本身就内置了强大的 AI 辅助功能，无需额外安装插件，可以直接使用。

##### 修改 CRAN 镜像源 (可选，国内用户推荐)
- 为了加快R包的下载速度，可以修改 CRAN 镜像源为国内镜像。
- 永久修改 CRAN 镜像源 (推荐，修改 `.Rprofile` 文件):
  -  打开你的用户目录 (例如，Windows 下的 "文档" 目录，macOS/Linux 下的 "~" 目录)。
  -  查找或创建 `.Rprofile` 文件。如果文件不存在，新建一个文本文件并命名为 `.Rprofile`。
  -  使用文本编辑器打开 `.Rprofile` 文件，添加以下代码，选择国内镜像 (例如 清华大学 [China (Tsinghua University)])：
    ```R
    options(repos = c(CRAN = "https://mirrors.tuna.tsinghua.edu.cn/CRAN/"))
    ```
  -  保存 `.Rprofile` 文件。
  -  重启 R 或 RStudio/Cursor，新的 CRAN 镜像源将永久生效。

- 临时修改 CRAN 镜像源 (不推荐永久使用，仅用于测试)：
  - 在R控制台中运行以下代码，选择国内镜像 (例如 清华大学 [China (Tsinghua University)])：
    ```R
    options(repos = c(CRAN = "https://mirrors.tuna.tsinghua.edu.cn/CRAN/"))
    ```
  -  这种方法只在当前 R 会话中有效，关闭 R 后会失效。

### 3. R 包安装和R基础语法

#### R 包安装和基础语法

##### 安装 R 包
- 使用 `install.packages()` 函数安装 R 包。 例如，安装 `tidyverse` 包：
  ```R
  install.packages("tidyverse")
  ```
- 可以一次安装多个包，例如：
  ```R
  install.packages(c("dplyr", "ggplot2", "readr"))
  ```

##### 加载 R 包
- 使用 `library()` 函数加载已安装的 R 包。 例如，加载 `tidyverse` 包：
  ```R
  library(tidyverse)
  ```

##### 使用 `pacman` 包安装和加载 R 包

-  `pacman` 包是一个方便的包管理工具，可以使用 `p_load()` 函数一次性安装并加载多个 R 包。如果包尚未安装，`p_load()` 会自动安装它。

- 首先，如果还没有安装 `pacman` 包，需要先安装它：
  ```R
  if (!requireNamespace("pacman", quietly = TRUE)) {
    install.packages("pacman")
  }
  ```

- 然后，使用 `pacman::p_load()` 函数来安装和加载包。 例如，安装并加载 `dplyr` 和 `ggplot2` 包：
  ```R
  pacman::p_load(dplyr, ggplot2)
  ```

-  `p_load()` 函数的优点是可以一次性处理多个包，并且会自动安装缺失的包，简化了包管理流程。你只需要列出你想要安装和加载的包名，用逗号分隔即可。


##### R 基础语法

###### 变量赋值和基本运算
- **变量赋值**:  使用 `<-` 或 `=` 进行变量赋值。
  ```R
  x <- 10
  y = 20
  ```
- **基本运算**:  加减乘除等基本运算符 `+`, `-`, `*`, `/`。
  ```R
  z <- x + y
  ```

###### 常用数据类型
- **常用数据类型**:
    - 数值型 (numeric): `10`, `3.14`
    - 字符型 (character): `"hello"`, `'world'`
    - 逻辑型 (logical): `TRUE`, `FALSE`

###### 向量 (vector)
- **向量 (vector)**:  使用 `c()` 函数创建向量。
  ```R
  vec <- c(1, 2, 3, 4, 5)
  char_vec <- c("a", "b", "c")
  ```
- **向量索引**:  使用 `[]` 和索引值访问向量元素 (R 语言索引从1开始)。
  ```R
  vec[1]  # 访问第一个元素，结果为 1
  vec[c(2, 4)] # 访问第二个和第四个元素，结果为 c(2, 4)
  vec[-1] # 排除第一个元素，访问剩余元素
  vec[vec > 3] # 逻辑索引，访问大于 3 的元素，结果为 c(4, 5)
  ```

###### 列表 (list)
- **列表 (list)**:  使用 `list()` 函数创建列表，列表可以包含不同类型的数据。
  ```R
  list_example <- list(
    name = "Alice",
    age = 30,
    scores = c(85, 90, 92),
    is_student = TRUE
  )
  ```
- **命名列表**:  在创建列表时为元素命名，方便后续访问。上面的 `list_example` 就是一个命名列表。
- **列表元素访问**:  使用 `$` 符号或 `[[]]` 访问列表元素。
  ```R
  list_example$name # 使用 $ 符号按名称访问，结果为 "Alice"
  list_example[["age"]] # 使用 [[]] 按名称访问，结果为 30
  list_example[[3]] # 使用 [[]] 按索引访问，结果为 c(85, 90, 92)
  ```

###### 数据框 (data.frame)
- **数据框 (data.frame)**:  用于存储表格数据。
  ```R
  df <- data.frame(
    name = c("Alice", "Bob", "Charlie"),
    age = c(25, 30, 28),
    gender = c("F", "M", "M")
  )
  ```
- **数据框引用**:  使用 `$` 符号、`[]` 或 `[[]]` 访问数据框的列或元素。
  ```R
  df$name # 使用 $ 符号按列名访问，结果为 name 列的向量
  df[, "age"] # 使用 [] 按列名访问，结果为 age 列的向量
  df[, 2] # 使用 [] 按列索引访问，结果为 age 列的向量
  df[1, ] # 使用 [] 访问第一行，结果为第一行的数据框
  df[1, 1] # 使用 [] 访问第一行第一列的元素，结果为 "Alice"
  df[["gender"]] # 使用 [[]] 按列名访问，结果为 gender 列的向量
  ```

###### 注释和帮助文档
- **注释**:  使用 `#` 符号添加注释。
  ```R
  # 这是一个注释
  ```
- **帮助文档**:  使用 `help()` 函数或 `?` 符号查看函数帮助文档。
  ```R
  help(install.packages)
  ?library
  ```

::: {.callout-important}
## 课后作业 (第一周)
1.  **完成R和RStudio (或 Cursor, VSCode) 的安装。**
2.  **安装必要的R和AI辅助插件。**
3.  **修改CRAN镜像源 (国内用户)。**
4.  **安装 `tidyverse` 包，并尝试加载。**
5.  **第一周小组需要完成项目选题，并开始调研相关数据来源。**
6.  **尝试使用 `readr` 包导入自己找到的 (或老师提供的) 示例数据文件到R中。**
7.  **思考题：**  结合自己感兴趣的项目主题，初步思考可以从数据中探索哪些问题？希望获得哪些洞察？
:::

#### AI 辅助学习建议 (贯穿第一周)

##### R环境搭建和tidyverse安装
- 使用AI搜索R和RStudio/Cursor的最新安装指南。
- 使用AI查找R插件和AI辅助插件的安装教程。
- 使用AI工具 (如Cursor) 辅助代码编写和理解，例如，让AI解释 `install.packages()` 和 `library()` 函数的作用。

##### 数据获取方法
- 使用AI工具 (如Cursor, 搜索引擎) 辅助查找数据资源。 例如，使用AI搜索 "电影公开数据集" 或 "Spotify API"。
- 使用AI总结API文档的关键信息，或者解释API请求的参数含义。

##### R语言数据导入
- 使用AI工具 (如Cursor) 辅助代码编写和调试。 例如，如果学生在导入数据时遇到错误，可以使用AI工具诊断错误原因并提供解决方案。
- 使用AI工具学习R基础语法，例如，让AI解释变量赋值、数据类型、向量和数据框的概念和用法，并生成示例代码。