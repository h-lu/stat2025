---
title: "项目一：数据探索与初步洞察课件 (第1-4周)"
---

## 项目一：数据探索与初步洞察 (第1-4周，共16课时)

### 第一周：项目启动与统计学导论 (共4课时)  {#week-1-title}
* syllabus: **项目启动与统计学导论**

### 第一次课 (90分钟)

**上半场 (讲解，约45分钟):**

*   **课程和项目介绍 (15分钟):**
    *   课程总体目标、结构、考核方式回顾。
    *   **重点介绍项目式教学**：强调学生通过完成四个项目来学习和应用统计知识。
    *   **详细讲解项目一：数据探索与初步洞察** 的目标、主题选择（电影、音乐、游戏、股票等），以及项目周期和成果要求。
    *   **分组**:  现场分组，鼓励自由组队，每组2-3人。
*   **统计学基本概念 (30分钟):**
    *   **什么是统计学？**  定义、目标、在经管领域的应用案例 (结合学生专业背景举例)。
    *   **统计学的基本概念:**
        *   总体 (Population) 与 样本 (Sample)
        *   变量 (Variable) 的类型：分类变量 (Categorical)、数值变量 (Numerical)
        *   描述性统计 (Descriptive Statistics) 与 推断性统计 (Inferential Statistics)
    *   **强调统计思维的重要性**：如何从数据中提取信息，发现规律，做出决策。

**下半场 (R语言和tidyverse简介 + 练习，约45分钟):**

*   **R语言和tidyverse简介 (20分钟):**
    *   **R语言的特点和优势**：开源、免费、强大的统计分析和可视化功能、活跃的社区。
    *   **tidyverse生态系统介绍**：`dplyr` (数据处理)、`ggplot2` (数据可视化)、`readr` (数据导入)、`tidyr` (数据整理) 等核心包，强调其简洁、高效、易读的语法风格。
    *   **为什么选择tidyverse?**  统一的数据处理流程 (管道操作符 `%>%`)，更符合现代数据分析的习惯。
*   **R环境搭建和tidyverse安装 (15分钟):**
    *   **演示R和RStudio的安装** (或根据学生情况，提供详细安装指南)。
    *   **在RStudio中安装tidyverse包** (`install.packages("tidyverse")`)。
    *   **验证安装成功** (`library(tidyverse)`).
*   **R语言初步练习 (10分钟):**
    *   **基本操作:**  RStudio界面介绍、控制台操作、变量赋值、基本运算。
    *   **使用 `help()` 函数** 学习R函数的使用方法。
    *   **鼓励学生使用AI工具 (如Cursor, GitHub Copilot) 辅助代码编写和理解。**  例如，让AI解释 `install.packages()` 和 `library()` 函数的作用。

### 第二次课 (90分钟)

**上半场 (数据获取方法入门 + 练习，约45分钟):**

*   **数据获取方法入门 (30分钟):**  {#week-1-data-acquisition}
    *   **公开数据集:**  介绍常见的数据集网站 (Kaggle, UCI Machine Learning Repository, 各种政府/机构开放数据平台)。
    *   **API (应用程序编程接口):**
        *   什么是API？API的作用和优势。
        *   **以一个简单的API为例 (例如，一个提供电影信息的公开API)**，演示如何使用API获取数据 (概念性介绍，不深入代码)。
        *   强调API是程序之间交流的桥梁，是获取实时数据的重要方式。
    *   **爬虫初步 (概念性介绍):**
        *   什么是网络爬虫？爬虫的基本原理。
        *   **强调爬虫的合法性和伦理约束**，以及在数据获取时需要遵守的规则 (robots.txt, 网站使用条款等)。
        *   说明爬虫是更高级的数据获取方法，本课程初期不作为重点，但学生可以了解。
*   **数据获取方法练习 (15分钟):**
    *   **布置任务：**  让学生根据自己选择的项目主题 (电影、音乐、游戏、股票)，**查找至少两个相关的公开数据集或API**。
    *   **鼓励学生使用AI工具 (如Cursor, 搜索引擎) 辅助查找数据资源。**  例如，使用AI搜索 "电影公开数据集" 或 "Spotify API"。
    *   **小组讨论：**  组内成员分享找到的数据资源，讨论数据的可用性和适用性。

**下半场 (R语言数据导入初步 + 练习，约45分钟):**

*   **R语言数据导入：`readr` 包 (30分钟):**
    *   **`readr` 包介绍**：tidyverse生态中用于数据导入的包，强调其快速、高效、易用。
    *   **`read_csv()` 函数**：
        *   讲解 `read_csv()` 函数的基本用法，读取CSV文件。
        *   **演示：**  提供一个简单的CSV示例文件 (例如，包含几行电影数据的CSV文件)，演示如何使用 `read_csv()` 导入数据到R中。
        *   讲解 `read_csv()` 函数的常用参数，例如 `file` (文件路径), `header` (是否包含表头), `encoding` (字符编码) 等。
    *   **`read_tsv()` 和 `read_delim()` 函数**： 简要介绍读取TSV和分隔符文件的函数。
    *   **`read_table()` 函数**:  简要介绍读取表格文件的函数。
*   **数据导入练习 (15分钟):**
    *   **提供几个不同格式 (CSV, TXT) 的示例数据文件** (简单的，与项目主题相关的)。
    *   **练习任务：**  让学生使用 `readr` 包的函数，将示例数据文件导入到R中。
    *   **鼓励学生使用AI工具 (如Cursor) 辅助代码编写和调试。**  例如，如果学生在导入数据时遇到错误，可以使用AI工具诊断错误原因并提供解决方案。

**课后作业 (第一周):**

1.  **完成R和RStudio的安装，tidyverse包的安装。**
2.  **根据小组选择的项目主题，继续深入查找相关的数据集或API，确定初步的数据来源。**
3.  **尝试使用 `readr` 包导入自己找到的 (或老师提供的) 示例数据文件到R中。**
4.  **思考题：**  结合自己感兴趣的项目主题，初步思考可以从数据中探索哪些问题？希望获得哪些洞察？

## 第二周：数据获取与R语言数据导入 (共4课时) {#week-2-title}
* syllabus: **数据获取与R语言数据导入**

### 第三次课 (90分钟)

**上半场 (项目讨论 + 数据获取实践，约45分钟):**

*   **项目讨论：确定数据来源和获取方案 (30分钟):**
    *   **小组汇报：**  各小组汇报上周课后作业的数据资源查找情况，分享找到的数据集或API。
    *   **教师引导讨论：**
        *   评估各小组数据资源的可行性和质量。
        *   **重点讨论数据获取方案**：
            *   如果选择公开数据集，如何下载和准备数据。
            *   如果选择API，如何注册API账号，获取API密钥 (如果需要)，初步了解API文档。
            *   **强调数据获取的效率和可行性**，避免选择过于复杂或难以获取的数据。
        *   **鼓励小组之间互相交流和学习数据获取经验。**
*   **公开数据集、API获取实践 (15分钟):**
    *   **针对选择公开数据集的小组：**  指导学生下载数据集，并初步查看数据集的文件结构和内容。
    *   **针对选择API的小组：**  指导学生注册API账号，阅读API文档，尝试使用API请求工具 (例如Postman，或者R中的 `httr` 包，但本周不深入 `httr`，仅概念性了解)。
    *   **鼓励学生使用AI工具 (如Cursor, 搜索引擎) 辅助理解API文档和操作。**  例如，使用AI总结API文档的关键信息，或者解释API请求的参数含义。

**下半场 (R语言数据导入进阶 + 练习，约45分钟):**

*   **R语言数据导入：更多格式 (30分钟):**
    *   **`read_excel()` 函数**： 讲解读取Excel文件 (`.xls`, `.xlsx`)，需要安装 `readxl` 包 (`install.packages("readxl")`)。
    *   **`read_json()` 函数**： 讲解读取JSON文件，需要安装 `jsonlite` 包 (`install.packages("jsonlite")`)。
    *   **`read_html()` 函数**： 简要介绍读取HTML表格数据，需要安装 `rvest` 包 (`install.packages("rvest")`)，强调网页数据抓取的初步概念。
    *   **`fread()` 函数 (来自 `data.table` 包)**： 简要介绍 `fread()` 函数在读取大型数据文件时的优势 (速度快)，可以作为 `read_csv()` 的替代方案，但本课程初期主要使用 `readr`。
*   **数据导入练习 (15分钟):**
    *   **提供不同格式 (Excel, JSON, 简单的HTML表格) 的示例数据文件。**
    *   **练习任务：**  让学生使用相应的R函数，将不同格式的示例数据文件导入到R中。
    *   **鼓励学生使用AI工具 (如Cursor) 辅助解决数据导入过程中遇到的问题。**  例如，如果Excel文件导入失败，可以使用AI诊断是否缺少依赖包，或者文件格式是否错误。

### 第四次课 (90分钟)

**上半场 (数据初步查看和理解 + 数据类型回顾与数据质量，约45分钟):**

*   **数据初步查看和理解 (25分钟):**  {#week-2-data-understanding}
    *   **导入数据后，如何快速查看和理解数据？**
        *   **`head()` 和 `tail()` 函数**： 查看数据框的前几行和后几行。
        *   **`glimpse()` 函数 (来自 `dplyr` 包)**：  更清晰地展示数据框的结构，包括列名、数据类型和前几行数据。
        *   **`summary()` 函数**：  查看各列的描述性统计信息 (均值、中位数、最小值、最大值、四分位数等)。
        *   **`str()` 函数**：  查看数据框的结构，包括数据类型和维度。
        *   **`names()` 函数**：  查看列名。
    *   **练习：**  使用上述函数，查看导入的示例数据，初步理解数据的含义和结构。
*   **数据类型回顾与数据质量 (20分钟):**
    *   **数据类型回顾：**
        *   **数值型 (numeric, integer)**：  连续型和离散型数值变量。
        *   **字符型 (character)**：  文本数据。
        *   **逻辑型 (logical)**：  TRUE/FALSE。
        *   **因子型 (factor)**：  分类变量，有序因子和无序因子。
        *   **日期型 (Date, POSIXct)**：  日期和时间数据。
    *   **数据质量问题：**
        *   **缺失值 (Missing values, NA)**：  产生原因、处理方法 (后续课程介绍)。
        *   **重复值 (Duplicates)**：  如何识别和处理重复数据。
        *   **异常值 (Outliers)**：  可能的原因、识别方法 (可视化、统计方法)。
        *   **数据一致性问题**：  例如，单位不统一、格式不规范等。
    *   **强调数据质量对后续分析的重要性**，"Garbage in, garbage out"。

**下半场 (描述性统计量初步 + `dplyr` 数据清洗初步 + 练习，约45分钟):**

*   **描述性统计量初步 (20分钟):**  {#week-2-descriptive-stats-dplyr-intro}
    *   **集中趋势的度量：**
        *   **均值 (Mean)**：  `mean()` 函数。
        *   **中位数 (Median)**： `median()` 函数。
        *   **众数 (Mode)**：  (R中没有直接函数，可以自定义或使用包，本周不深入)。
    *   **离散程度的度量：**
        *   **标准差 (Standard Deviation)**： `sd()` 函数。
        *   **方差 (Variance)**： `var()` 函数。
        *   **四分位距 (Interquartile Range, IQR)**： `IQR()` 函数。
        *   **极差 (Range)**：  `range()` 函数 (返回最小值和最大值，需要手动计算极差)。
    *   **`summary()` 函数的详细解读**：  结合描述性统计量，更深入地理解 `summary()` 函数的输出结果。
*   **`dplyr` 包：数据清洗和预处理初步 (15分钟):**
    *   **`dplyr` 包的核心动词 (verbs) 简介**： `select()`, `filter()`, `mutate()`, `arrange()`, `summarise()`, `group_by()`, `%>%` (管道操作符)。
    *   **`select()` 函数**：  选择列。
    *   **`filter()` 函数**：  筛选行 (根据条件)。
    *   **演示：**  使用 `dplyr` 函数对示例数据进行简单的列选择和行筛选操作。
*   **描述性统计和数据清洗练习 (10分钟):**
    *   **练习任务：**  使用R函数计算示例数据的描述性统计量，并使用 `dplyr` 函数进行简单的列选择和行筛选操作。
    *   **鼓励学生使用AI工具 (如Cursor) 辅助代码编写和理解 `dplyr` 函数。**  例如，让AI解释 `select()` 和 `filter()` 函数的用法和参数。

**课后作业 (第二周):**

1.  **完成数据获取：**  根据小组确定的数据来源，下载公开数据集或尝试使用API获取数据 (如果选择API，本周重点是尝试，不强求成功获取完整数据)。
2.  **使用 `readr` (或其他合适的包) 将获取的数据导入到R中。**
3.  **使用 `head()`, `glimpse()`, `summary()`, `str()` 等函数初步查看和理解导入的数据。**
4.  **计算数据中关键变量的描述性统计量 (均值、中位数、标准差等)。**
5.  **尝试使用 `dplyr` 包的 `select()` 和 `filter()` 函数进行简单的数据清洗操作。**
6.  **思考题：**  目前获取的数据是否存在质量问题？例如，是否有缺失值、异常值、重复值等？初步思考如何处理这些问题 (可以查阅资料或使用AI工具搜索)。

## 第三周：描述性统计：数据探索与可视化 (共4课时) {#week-3-title}
* syllabus: **描述性统计：数据探索与可视化**

### 第五次课 (90分钟)

**上半场 (`dplyr` 和 `tidyr` 数据清洗和预处理进阶，约45分钟):**

*   **`dplyr` 包：数据清洗和预处理进阶 (30分钟):**  {#week-3-dplyr-tidyr}
    *   **`mutate()` 函数**：  创建新列或修改现有列 (基于现有列进行计算)。
    *   **`arrange()` 函数**：  排序数据 (按列升序或降序)。
    *   **`rename()` 函数**：  重命名列名。
    *   **`distinct()` 函数**：  去除重复行。
    *   **`summarise()` 函数**：  计算汇总统计量 (结合 `group_by()` 使用)。
    *   **`group_by()` 函数**：  分组数据 (用于分组计算汇总统计量)。
    *   **管道操作符 `%>%` 的深入应用**：  将多个 `dplyr` 函数链式组合，实现复杂的数据处理流程。
    *   **演示：**  结合示例数据，演示使用 `dplyr` 函数进行更复杂的数据清洗和预处理操作，例如，创建新变量、排序、分组计算均值等。
*   **`tidyr` 包：数据整理 (15分钟):**
    *   **`tidyr` 包介绍**：  tidyverse生态中用于数据整理的包，解决 "tidy data" (整洁数据) 问题。
    *   **"Tidy Data" 的概念**：  每一列是一个变量，每一行是一个观测，每个单元格是一个值。
    *   **`pivot_longer()` 函数**：  将宽格式数据转换为长格式数据 (unpivot)。
    *   **`pivot_wider()` 函数**：  将长格式数据转换为宽格式数据 (pivot)。
    *   **`separate()` 函数**：  将一列拆分成多列。
    *   **`unite()` 函数**：  将多列合并成一列。
    *   **演示：**  使用 `tidyr` 函数对示例数据进行数据格式转换操作，例如，将宽格式数据转换为长格式。

**下半场 (`ggplot2` 数据可视化初步 + 练习，约45分钟):**

*   **`ggplot2` 包：数据可视化初步 (30分钟):**  {#week-3-ggplot2-intro}
    *   **`ggplot2` 包介绍**：  tidyverse生态中强大的数据可视化包，基于 "图形语法" (Grammar of Graphics) 理论。
    *   **`ggplot2` 的基本语法结构**：
        *   `ggplot()` 函数：  创建ggplot对象，指定数据集和映射 (mapping, `aes()`)。
        *   `geom_xxx()` 函数：  添加几何对象 (geometries)，例如 `geom_histogram()` (直方图), `geom_point()` (散点图), `geom_boxplot()` (箱线图)。
        *   `aes()` 函数：  设置图形属性映射 (aesthetic mappings)，例如 `x`, `y`, `color`, `fill`, `size`, `shape` 等。
        *   `+` 符号：  连接不同的图层 (layers)。
    *   **常用几何对象：**
        *   **`geom_histogram()` (直方图)**：  展示数值变量的分布。
        *   **`geom_point()` (散点图)**：  展示两个数值变量之间的关系。
        *   **`geom_boxplot()` (箱线图)**：  展示数值变量在不同组别的分布，检测异常值。
    *   **基本图形属性设置**：  颜色 (`color`, `fill`), 大小 (`size`), 形状 (`shape`), 透明度 (`alpha`) 等。
    *   **演示：**  使用 `ggplot2` 绘制直方图、散点图和箱线图，展示示例数据的分布和关系。
*   **数据可视化练习 (15分钟):**
    *   **练习任务：**  使用 `ggplot2` 包，选择合适的可视化方法 (直方图、散点图、箱线图)，对示例数据进行可视化探索。
    *   **尝试调整图形属性 (颜色、标题、标签等)，美化图形。**
    *   **鼓励学生使用AI工具 (如Cursor) 辅助 `ggplot2` 代码编写和图形美化。**  例如，让AI生成绘制特定类型图形的 `ggplot2` 代码，或者提供美化图形的建议。

### 第六次课 (90分钟)

**上半场 (`ggplot2` 数据可视化进阶，约45分钟):**

*   **`ggplot2` 包：数据可视化进阶 (30分钟):**  {#week-3-ggplot2-advanced}
    *   **图例 (Legend) 和 轴标签 (Axis labels) 设置**：  `labs()` 函数 (设置标题、轴标签、图例标题)。
    *   **主题 (Theme) 设置**：  `theme_xxx()` 函数 (例如 `theme_minimal()`, `theme_bw()`)，自定义主题 (`theme()`)。
    *   **刻度 (Scale) 设置**：  `scale_x_xxx()`, `scale_y_xxx()` 函数 (例如 `scale_x_continuous()`, `scale_y_log10()`)，调整刻度范围、标签、格式。
    *   **分面 (Facet) 图**：  `facet_wrap()`, `facet_grid()` 函数，将数据按类别分组，绘制多个子图，用于比较不同组别的数据分布或关系。
    *   **添加统计变换 (Statistical transformations)**：  例如 `stat_summary()`, `stat_smooth()`，在图形中添加统计摘要信息或平滑曲线。
    *   **保存图形**：  `ggsave()` 函数，将ggplot图形保存为图片文件 (例如 `.png`, `.pdf`, `.jpg`)。
    *   **演示：**  使用 `ggplot2` 绘制更复杂的可视化图形，例如，添加标题和轴标签、修改主题、使用分面图、添加平滑曲线等。
*   **tidyverse 生态：数据处理和可视化的综合应用 (15分钟):**
    *   **结合 `dplyr`, `tidyr`, `ggplot2`，完成一个完整的数据探索和可视化案例。**
    *   **案例：**  例如，使用电影数据集，分析不同类型电影的平均评分分布，并可视化展示。
    *   **演示：**  从数据导入、数据清洗、数据整理、描述性统计、到数据可视化，完整演示使用tidyverse生态进行数据分析的流程。

**下半场 (数据探索与可视化综合练习 + 项目一讨论，约45分钟):**

*   **数据探索与可视化综合练习 (30分钟):**
    *   **练习任务：**  提供一个稍复杂的数据集 (例如，包含多个变量的电影数据集或音乐数据集)。
    *   **学生分组练习：**  使用 `dplyr`, `tidyr`, `ggplot2` 对数据集进行数据清洗、整理、描述性统计和可视化探索。
    *   **鼓励学生自主选择探索方向，例如：**
        *   分析不同类型电影的评分分布、票房情况。
        *   分析不同音乐流派的流行度、用户收听习惯。
        *   分析不同游戏类型的用户评价、销售情况。
    *   **鼓励学生使用AI工具 (如Cursor) 辅助数据分析和可视化代码编写。**  例如，让AI根据分析目标，生成相应的tidyverse代码。
*   **项目一讨论：初步成果展示和问题交流 (15分钟):**
    *   **各小组简要展示项目一的初步数据探索和可视化成果 (非正式展示)。**
    *   **小组之间互相交流，分享数据探索的发现和遇到的问题。**
    *   **教师巡回指导，解答学生疑问，提供项目建议。**

**课后作业 (第三周):**

1.  **继续深入探索自己项目的数据集，使用 `dplyr`, `tidyr` 进行数据清洗和整理。**
2.  **使用 `ggplot2` 包，选择合适的图表类型，对项目数据进行可视化探索，发现数据中的模式和规律。**
3.  **尝试美化可视化图表，添加标题、轴标签、图例、修改颜色和主题等。**
4.  **撰写项目一的初步分析报告 (草稿)，包括：**
    *   项目主题和目标
    *   数据来源和描述
    *   数据清洗和预处理步骤
    *   数据探索和可视化结果 (附上图表)
    *   初步的发现和洞察
5.  **思考题：**  通过数据探索和可视化，你对项目主题有了哪些初步的认识？还有哪些问题需要进一步分析和研究？

## 第四周：推断性统计初步：参数估计与假设检验 (共4课时) {#week-4-title}
* syllabus: **推断性统计初步：参数估计与假设检验**
* [课件 slides](week4.qmd)

### 第七次课 (90分钟)

**上半场 (参数估计：点估计、区间估计，约45分钟):**

*   **推断性统计初步：参数估计 (30分钟):**  {#week-4-parameter-estimation}
    *   **回顾描述性统计和推断性统计的区别。**
    *   **参数估计的目的：**  用样本统计量估计总体参数。
    *   **点估计 (Point Estimation)**：
        *   用样本均值估计总体均值，用样本比例估计总体比例等。
        *   **无偏性、有效性、一致性** (概念性介绍，不深入理论)。
        *   **R语言实现：**  使用 `mean()`, `median()`, `sd()` 等函数计算样本统计量，作为总体参数的点估计值。
    *   **区间估计 (Interval Estimation)**：
        *   **为什么需要区间估计？**  点估计存在误差，区间估计提供一个参数的可能取值范围，并给出置信水平。
        *   **置信区间 (Confidence Interval)**：  概念、置信水平 (Confidence Level, 例如 95%, 99%)、置信区间的宽度。
        *   **影响置信区间宽度的因素**：  样本量、置信水平、总体标准差 (或样本标准差)。
        *   **正态分布的置信区间** (总体均值的置信区间，已知总体标准差或大样本情况)。
        *   **t分布的置信区间** (总体均值的置信区间，未知总体标准差，小样本情况)。
        *   **R语言实现：**  使用R函数计算均值的置信区间 (例如，手动计算公式，或使用包如 `t.test()`，本周先手动计算公式)。
*   **参数估计练习 (15分钟):**
    *   **练习任务：**  提供一个示例数据集 (例如，电影评分数据)。
    *   **计算样本均值和样本标准差，作为总体均值和总体标准差的点估计值。**
    *   **手动计算总体均值的 95% 和 99% 置信区间 (假设总体服从正态分布，使用样本标准差近似总体标准差)。**
    *   **解释置信区间的含义。**
    *   **鼓励学生使用AI工具 (如Cursor) 辅助公式计算和R代码编写。**  例如，让AI生成计算置信区间的R代码，或者解释置信区间的公式。

**下半场 (假设检验基本原理与步骤，约45分钟):**

*   **推断性统计初步：假设检验 (30分钟):**  {#week-4-hypothesis-testing-principles}
    *   **假设检验的目的：**  检验关于总体参数的假设是否成立。
    *   **假设检验的基本思想：**  反证法，小概率事件原理。
    *   **假设检验的步骤：**
        1.  **提出原假设 (Null Hypothesis, H0) 和备择假设 (Alternative Hypothesis, H1)。**
        2.  **选择检验统计量 (Test Statistic)。**
        3.  **确定显著性水平 (Significance Level, α, 例如 0.05, 0.01)。**
        4.  **计算检验统计量的p值 (p-value)。**
        5.  **做出决策：**  如果 p-value ≤ α，拒绝原假设 H0，接受备择假设 H1；如果 p-value > α，不拒绝原假设 H0。
    *   **原假设和备择假设的设定原则**：  通常原假设是"没有效应"、"没有差异"、"没有关系"的假设，备择假设是希望证明的假设。
    *   **显著性水平 α 的含义**：  犯第一类错误的概率 (Type I error, 拒真错误)。
    *   **p值的含义**：  在原假设成立的条件下，观察到样本结果或更极端结果的概率。
    *   **第一类错误 (Type I error, 拒真错误) 和 第二类错误 (Type II error, 受伪错误) 的概念** (概念性介绍)。
*   **假设检验基本原理练习 (15分钟):**
    *   **练习任务：**  提供一个假设检验的应用场景 (例如，检验某电影类型的平均评分是否高于某个值)。
    *   **引导学生完成假设检验的五个步骤：**  设定原假设和备择假设，选择合适的检验统计量 (本周先概念性选择，下节课具体介绍)，确定显著性水平，理解p值和决策规则。
    *   **重点理解原假设、备择假设、显著性水平和p值的含义。**
    *   **鼓励学生使用AI工具 (如Cursor, 搜索引擎) 辅助理解假设检验的概念和步骤。**  例如，让AI解释原假设和备择假设的区别，或者显著性水平的意义。

### 第八次课 (90分钟)

**上半场 (单样本t检验、双样本t检验，约45分钟):**

*   **常用假设检验方法：t检验 (30分钟):**  {#week-4-t-test}
    *   **t检验的应用场景**：  检验总体均值是否等于某个值，或检验两个总体的均值是否相等。
    *   **单样本t检验 (One-Sample t-test)**：
        *   **适用条件**：  检验一个正态分布总体的均值是否等于某个已知值。
        *   **原假设 H0：μ = μ0，备择假设 H1：μ ≠ μ0 (双尾检验), μ > μ0 (右尾检验), μ < μ0 (左尾检验)。**
        *   **检验统计量：t统计量公式。**
        *   **自由度 (degrees of freedom, df) = n - 1。**
        *   **p值的计算：使用t分布的累积分布函数 (CDF) 或生存函数 (SF)。**
        *   **R语言实现：**  `t.test()` 函数，讲解 `t.test()` 函数的基本用法和参数 (例如 `mu`, `alternative`, `conf.level`)。
    *   **双样本t检验 (Two-Sample t-test)**：
        *   **独立样本t检验 (Independent Samples t-test)**：
            *   **适用条件**：  检验两个独立的正态分布总体的均值是否相等。
            *   **原假设 H0：μ1 = μ2，备择假设 H1：μ1 ≠ μ2 (双尾检验), μ1 > μ2 (右尾检验), μ1 < μ2 (左尾检验)。**
            *   **检验统计量：独立样本t统计量公式 (等方差和不等方差两种情况)。**
            *   **自由度 (df) 的计算 (等方差和不等方差两种情况)。**
            *   **R语言实现：**  `t.test()` 函数，设置 `paired = FALSE`，以及 `var.equal` 参数 (指定是否假设方差相等)。
        *   **配对样本t检验 (Paired Samples t-test)**：
            *   **适用条件**：  检验两个配对样本的均值差是否为零 (例如，同一组对象在处理前后的测量值)。
            *   **原假设 H0：μd = 0，备择假设 H1：μd ≠ 0 (双尾检验), μd > 0 (右尾检验), μd < 0 (左尾检验)，其中 μd 是配对样本差值的总体均值。**
            *   **检验统计量：配对样本t统计量公式。**
            *   **自由度 (df) = n - 1，其中 n 是配对样本的数量。**
            *   **R语言实现：**  `t.test()` 函数，设置 `paired = TRUE`。
        *   **演示：**  使用 `t.test()` 函数对示例数据进行单样本t检验和双样本t检验 (独立样本和配对样本)。
*   **t检验练习 (15分钟):**
    *   **练习任务：**  提供几个t检验的应用场景 (例如，检验某类型电影的平均评分是否为特定值，检验不同类型电影的平均评分是否相等，检验同一组用户对某电影评分前后的变化)。
    *   **学生分组练习：**  使用 `t.test()` 函数对示例数据进行单样本t检验和双样本t检验。
    *   **解释t检验的结果 (p值、置信区间、决策结论)。**
    *   **鼓励学生使用AI工具 (如Cursor) 辅助 `t.test()` 函数的使用和结果解释。**  例如，让AI解释 `t.test()` 函数的输出结果，或者根据t检验的结果给出结论建议。

**下半场 (项目一检查与汇报准备，约45分钟):**

*   **项目一检查与中期汇报准备 (30分钟):**  {#week-4-project1-check-report-prep}
    *   **各小组展示项目一的最终数据探索和可视化成果 (非正式展示)。**
    *   **教师检查各小组的项目进展情况，包括：**
        *   数据获取和质量
        *   数据清洗和整理
        *   描述性统计和可视化探索
        *   初步的发现和洞察
    *   **教师提供针对性的项目反馈和改进建议。**
    *   **布置项目一正式汇报的要求和格式 (例如，PPT汇报，汇报时间，评分标准)。**
    *   **指导学生准备项目汇报内容，重点突出：**
        *   项目主题和目标
        *   数据来源和描述
        *   数据清洗和预处理方法
        *   数据探索和可视化结果 (重点展示图表，并进行解释)
        *   初步的发现和洞察 (从数据中得出的结论)
        *   项目总结和反思
*   **项目汇报准备指导 (15分钟):**
    *   **汇报技巧指导：**  如何清晰、简洁、有效地展示项目成果。
    *   **PPT制作建议：**  图文并茂，重点突出，逻辑清晰。
    *   **答辩准备建议：**  预想可能被提问的问题，做好充分准备。
    *   **鼓励小组内部分工合作，共同完成汇报准备。**
    *   **鼓励学生使用AI工具 (如Cursor, ChatGPT) 辅助PPT制作和汇报稿撰写。**  例如，让AI根据项目报告草稿，生成PPT大纲或汇报稿初稿。

**课后作业 (第四周):**

1.  **完成项目一的正式分析报告，并根据教师反馈进行修改和完善。**
2.  **准备项目一的PPT汇报，并进行小组内部预演。**
3.  **复习本周学习的参数估计和假设检验的基本概念和方法。**
4.  **思考题：**  在项目一的数据探索过程中，你使用了哪些描述性统计和可视化方法？这些方法帮助你发现了哪些数据规律和洞察？你认为项目一的成果有哪些局限性？下一步可以如何深入分析？

**项目一汇报 (安排在第五周第一次课)**

*   **各小组进行项目一的正式汇报和答辩。**
*   **教师和学生进行项目评价和打分。**
*   **教师总结项目一的整体情况，并对优秀项目进行表扬。**
*   **引入项目二：商业数据分析与统计推断。**

**AI辅助学习建议 (贯穿1-4周):**

*   **鼓励学生在遇到R语言代码问题时，首先尝试使用AI工具 (如Cursor, GitHub Copilot) 寻求帮助。**  例如，使用AI解释代码含义、查找函数用法、诊断代码错误、生成代码片段等。
*   **鼓励学生使用AI工具搜索和查找统计学和R语言的学习资源。**  例如，搜索统计学概念解释、R语言教程、tidyverse案例分析等。
*   **鼓励学生使用AI工具辅助项目报告撰写和PPT制作。**  例如，使用AI进行文本润色、语法检查、生成PPT大纲、提供排版建议等。
*   **教师在课堂上可以示范如何使用AI工具辅助教学和学习，引导学生正确有效地使用AI工具。**
*   **强调AI工具是辅助学习的工具，不能完全替代自主思考和学习。**  学生仍然需要认真学习统计学原理和R语言知识，才能更好地理解和应用AI工具的辅助结果。