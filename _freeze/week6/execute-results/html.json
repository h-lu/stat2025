{
  "hash": "3de7a0fc8c9c9f6990994a95210c6c43",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"第六周：回归分析初步\"\n---\n\n\n\n\n\n\n## 第十一次课：线性回归模型与最小二乘法\n\n### 回归分析概述\n\n::: {.callout-note appearance=\"minimal\"}\n## 回归分析\n\n回归分析是统计分析中重要的工具，它用于描述变量之间的线性关系，并建立预测模型。\n:::\n\n::: {.callout-note appearance=\"minimal\"}\n## 回归分析的目的\n\n- **研究关系**：分析因变量与一个或多个自变量之间的关系。\n- **建立模型**：构建模型以进行预测和解释现象。\n- **评估关联**：评估变量之间关联的程度和方向。\n\n回归分析是商业分析中常用的核心技术之一，可以解答以下商业问题：\n\n- 哪些因素关键影响销售额？各自的影响程度如何？\n- 如何通过产品特征预测产品价格？\n- 不同的营销投入对业绩的边际贡献是多少？\n:::\n\n::: {.callout-tip appearance=\"minimal\"}\n## 回归分析的应用场景\n\n- **预测**：销售额预测、房价预测、股票价格预测等。\n- **行为分析**：分析影响消费者购买行为的因素。\n- **效果评估**：评估营销活动、政策实施等效果。\n- **绩效识别**：识别影响企业绩效的关键指标。\n:::\n\n::: {.callout-warning appearance=\"minimal\"}\n## 回归分析的类型\n\n- **按关系类型**\n    - **线性回归**：自变量与因变量之间呈线性关系。\n    - **非线性回归**：自变量与因变量之间呈非线性关系。\n- **按自变量数量**\n    - **简单线性回归**：仅有一个自变量。\n    - **多元线性回归**：有多个自变量。\n:::\n\n::: {.callout-important appearance=\"minimal\"}\n## 回归分析与其他统计方法的区别\n\n- **与相关分析**：回归分析不仅描述变量间的关系，更侧重于建立预测模型。\n- **与方差分析**：回归分析主要处理连续型自变量，而方差分析侧重于分类自变量。\n:::\n\n::: {.callout-caution appearance=\"minimal\"}\n## 回归分析的基本步骤\n\n1. **模型确定**：选择合适的回归模型类型 (线性/非线性，简单/多元)。\n2. **参数估计**：使用样本数据估计模型中的未知参数。\n3. **模型检验**：评估模型的拟合效果和统计显著性。\n4. **模型应用**：运用已建立的模型进行预测、解释和决策。\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 加载 Boston 房价数据集\n# 数据集介绍：Boston 数据集包含了波士顿郊区房价的中位数以及可能影响房价的 13 个变量。\n# 变量包括：\n# - crim：城镇人均犯罪率\n# - zn：住宅用地超过 25,000 平方英尺的比例\n# - indus：城镇非零售业务用地比例\n# - chas：查尔斯河虚拟变量（如果土地在河边，则为 1；否则为 0）\n# - nox：氮氧化物浓度（百万分之几）\n# - rm：每栋住宅的平均房间数\n# - age：1940 年之前建造的自住房屋比例\n# - dis：到五个波士顿就业中心的加权距离\n# - rad：到高速公路的可达性指数\n# - tax：每 10,000 美元的全额物业税率\n# - ptratio：城镇的师生比例\n# - black： 1000(Bk - 0.63)^2，其中 Bk 是城镇中黑人的比例\n# - lstat：人口中地位较低人群的百分比\n# - medv：自住房屋的中位数价值（单位：1000 美元）\n\nlibrary(MASS)\ndata(Boston)\n\n# 探索性数据分析：房价与几个主要因素之间的关系\np1 <- ggplot(Boston, aes(x = rm, y = medv)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  labs(title = \"房间数与房价关系\",\n       x = \"平均房间数\",\n       y = \"房价（千美元）\")\n\np2 <- ggplot(Boston, aes(x = lstat, y = medv)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  labs(title = \"低收入人口比例与房价关系\",\n       x = \"低收入人口比例(%)\",\n       y = \"房价（千美元）\")\n\np3 <- ggplot(Boston, aes(x = crim, y = medv)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  labs(title = \"犯罪率与房价关系\",\n       x = \"犯罪率\",\n       y = \"房价（千美元）\")\n\np1 + p2 + p3\n```\n\n::: {.cell-output-display}\n![](week6_files/figure-html/unnamed-chunk-1-1.png){width=2400}\n:::\n:::\n\n\n\n\n### 简单线性回归模型\n\n**模型形式**：$y = \\beta_0 + \\beta_1 x + \\epsilon$\n\n- $y$：因变量\n- $x$：自变量\n- $\\beta_0$：截距，当$x=0$时，$y$的期望值\n- $\\beta_1$：斜率，自变量$x$每增加一个单位，因变量$y$的平均变化量\n- $\\epsilon$：随机误差项，反映模型无法解释的随机变异\n\n简单线性回归是理解回归分析的基础，它描述了一个自变量和一个因变量之间的线性关系。例如，我们可以建立一个模型来描述房屋平均房间数（自变量）与房价（因变量）之间的关系。\n\n### 最小二乘法的数学原理\n\n::: {.callout-note}\n## 最小二乘法 (OLS) 的基本思想\n\n最小二乘法的核心思想是找到一条直线，使得所有观测点到这条直线的垂直距离的平方和最小。这些垂直距离就是残差，代表了模型的预测误差。\n:::\n\n**数学推导**：\n\n1. **残差平方和表达式**：\n   - 给定数据点 $(x_1, y_1), (x_2, y_2), \\ldots, (x_n, y_n)$\n   - 回归直线为 $\\hat{y} = \\hat{\\beta}_0 + \\hat{\\beta}_1 x$\n   - 残差平方和 $\\text{RSS} = \\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2 = \\sum_{i=1}^{n} (y_i - (\\hat{\\beta}_0 + \\hat{\\beta}_1 x_i))^2$\n\n2. **求最小值**：\n   - 对 $\\hat{\\beta}_0$ 和 $\\hat{\\beta}_1$ 分别求偏导数并令其等于零：\n   \n   $$\\frac{\\partial \\text{RSS}}{\\partial \\hat{\\beta}_0} = -2\\sum_{i=1}^{n} (y_i - \\hat{\\beta}_0 - \\hat{\\beta}_1 x_i) = 0$$\n   \n   $$\\frac{\\partial \\text{RSS}}{\\partial \\hat{\\beta}_1} = -2\\sum_{i=1}^{n} x_i(y_i - \\hat{\\beta}_0 - \\hat{\\beta}_1 x_i) = 0$$\n\n3. **解方程组**：\n   - 从第一个方程可得：$\\sum_{i=1}^{n} y_i - n\\hat{\\beta}_0 - \\hat{\\beta}_1 \\sum_{i=1}^{n} x_i = 0$\n   - 整理后得：$\\hat{\\beta}_0 = \\bar{y} - \\hat{\\beta}_1 \\bar{x}$，其中 $\\bar{y}$ 和 $\\bar{x}$ 分别是 $y$ 和 $x$ 的平均值\n   \n   - 将 $\\hat{\\beta}_0$ 代入第二个方程：\n   $$\\sum_{i=1}^{n} x_i(y_i - (\\bar{y} - \\hat{\\beta}_1 \\bar{x}) - \\hat{\\beta}_1 x_i) = 0$$\n   \n   - 化简后得：\n   $$\\hat{\\beta}_1 = \\frac{\\sum_{i=1}^{n}(x_i - \\bar{x})(y_i - \\bar{y})}{\\sum_{i=1}^{n}(x_i - \\bar{x})^2}$$\n\n4. **几何解释**：\n   - $\\hat{\\beta}_1$ 是 $x$ 和 $y$ 的协方差除以 $x$ 的方差\n   - 这使得回归线恰好穿过数据点的重心 $(\\bar{x}, \\bar{y})$\n\n5. **矩阵形式**：\n   - 对于多元线性回归，最小二乘估计可以表示为：$\\hat{\\beta} = (X^TX)^{-1}X^Ty$\n   - 其中 $X$ 是自变量的设计矩阵，$y$ 是因变量向量\n\n::: {.callout-note}\n## 最小二乘法求解的几何意义\n\n最小二乘法是在样本空间中寻找一个超平面，使得观测值与这个超平面之间的距离平方和最小。这相当于将因变量向量 $y$ 投影到自变量空间上，得到的投影向量就是预测值 $\\hat{y}$。\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 以rm(房间数)与medv(房价)为例应用最小二乘法\n# 计算均值\nx_mean <- mean(Boston$rm)\ny_mean <- mean(Boston$medv)\n\n# 计算β1（斜率）\nnumerator <- sum((Boston$rm - x_mean) * (Boston$medv - y_mean))\ndenominator <- sum((Boston$rm - x_mean)^2)\nbeta1 <- numerator / denominator\n\n# 计算β0（截距）\nbeta0 <- y_mean - beta1 * x_mean\n\n# 展示计算结果\ncat(\"手动计算的最小二乘估计值：\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n手动计算的最小二乘估计值：\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"斜率(β1) =\", beta1, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n斜率(β1) = 9.102109 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"截距(β0) =\", beta0, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n截距(β0) = -34.67062 \n```\n\n\n:::\n\n```{.r .cell-code}\n# 使用lm函数验证结果\nmodel <- lm(medv ~ rm, data = Boston)\ncat(\"\\nlm函数计算的结果：\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nlm函数计算的结果：\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(coef(model))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(Intercept)          rm \n -34.670621    9.102109 \n```\n\n\n:::\n\n```{.r .cell-code}\n# 绘制回归线\nggplot(Boston, aes(x = rm, y = medv)) +\n  geom_point(alpha = 0.5) +\n  geom_abline(intercept = beta0, slope = beta1, color = \"red\", size = 1.2) +\n  labs(title = \"波士顿房价与平均房间数的关系\",\n       subtitle = paste0(\"回归方程: 房价 = \", round(beta0, 2), \" + \", round(beta1, 2), \" × 房间数\"),\n       x = \"平均房间数(rm)\",\n       y = \"房价中位数(medv，千美元)\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](week6_files/figure-html/unnamed-chunk-2-1.png){width=2400}\n:::\n:::\n\n\n\n\n\n::: {.callout-note}\n## 回归系数的解释\n\n- $\\hat{\\beta}_0$：当自变量$x$为0时，因变量$y$的预测值（在实际情况中，自变量为0可能没有现实意义）\n- $\\hat{\\beta}_1$：自变量$x$每增加一个单位，因变量$y$的预测值平均增加$\\hat{\\beta}_1$个单位（边际效应）\n:::\n\n\n## 回归模型的评估指标\n\n在构建回归模型后，我们需要评估模型的性能，以了解模型的预测能力和拟合程度。以下是一些常用的评估指标：\n\n- **决定系数 (R-squared, $R^2$)**：\n    - **定义**：衡量回归模型对因变量变异的解释程度。它表示模型可以解释因变量总变异的比例。\n    - **取值范围**：0 到 1 之间。\n    - **解释**：\n        - $R^2$ 越接近 1，表示模型拟合效果越好，模型能够解释因变量的大部分变异。\n        - $R^2$ 越接近 0，表示模型拟合效果越差，模型无法很好地解释因变量的变异。\n        - 例如，$R^2 = 0.75$ 表示模型可以解释 75% 的因变量变异。\n    - **优点**：直观易懂，可以直接衡量模型对数据的拟合程度。\n    - **缺点**：$R^2$ 会随着自变量数量的增加而增加，即使增加的自变量对模型并没有实际的改进作用。因此，在比较包含不同数量自变量的模型时，单独使用 $R^2$ 可能会误导。\n\n- **调整决定系数 (Adjusted $R^2$)**：\n    - **定义**：在 $R^2$ 的基础上，考虑了模型中自变量的数量。当模型中增加新的自变量时，如果该自变量对提高模型解释能力没有显著作用，调整 $R^2$ 会降低，从而避免了 $R^2$ 随着自变量数量增加而虚假增高的问题。\n    - **计算方式**：调整 $R^2$ 在计算时会惩罚模型中自变量的数量。\n    - **解释**：\n        - 调整 $R^2$ 更适用于比较包含不同数量自变量的模型。\n        - 调整 $R^2$ 越高，模型拟合效果越好，同时考虑了模型的简洁性。\n    - **适用场景**：当需要在多个模型中选择最佳模型，且这些模型的自变量数量不同时，调整 $R^2$ 是一个更合适的指标。\n\n- **均方误差 (Mean Squared Error, MSE)**：\n    - **定义**：衡量预测值与真实值之间差异的平方的平均值。\n    - **计算公式**：$\\text{MSE} = \\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2$，其中 $n$ 是样本量，$y_i$ 是真实值，$\\hat{y}_i$ 是预测值。\n    - **单位**：MSE 的单位是因变量单位的平方。\n    - **解释**：\n        - MSE 越小，表示模型的预测值与真实值越接近，模型的预测精度越高。\n        - MSE 对误差进行平方，使得较大的误差在 MSE 中占有更大的权重，因此 MSE 对异常值比较敏感。\n\n- **均方根误差 (Root Mean Squared Error, RMSE)**：\n    - **定义**：均方误差 (MSE) 的平方根。\n    - **计算公式**：$\\text{RMSE} = \\sqrt{\\text{MSE}} = \\sqrt{\\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2}$\n    - **单位**：RMSE 的单位与因变量的单位相同，因此在解释上更直观。\n    - **解释**：\n        - RMSE 越小，表示模型的预测值与真实值越接近，模型的预测精度越高。\n        - RMSE 与 MSE 一样，对异常值比较敏感。\n        - 由于 RMSE 的单位与因变量相同，因此更容易解释预测误差的大小。例如，RMSE = 10 表示平均预测误差约为 10 个单位。\n\n- **平均绝对误差 (Mean Absolute Error, MAE)**：\n    - **定义**：衡量预测值与真实值之间差异的绝对值的平均值。\n    - **计算公式**：$\\text{MAE} = \\frac{1}{n} \\sum_{i=1}^{n} |y_i - \\hat{y}_i|$\n    - **单位**：MAE 的单位与因变量的单位相同。\n    - **解释**：\n        - MAE 越小，表示模型的预测值与真实值越接近，模型的预测精度越高。\n        - MAE 对所有误差都给予相同的权重，因此对异常值不如 MSE 和 RMSE 敏感，更加稳健。\n        - MAE 直接反映了预测值偏离真实值的平均程度，例如，MAE = 5 表示平均预测误差约为 5 个单位。\n    - **适用场景**：当数据中存在异常值，并且希望模型对异常值不那么敏感时，MAE 是一个比 MSE 和 RMSE 更好的选择。\n\n总而言之，选择合适的评估指标取决于具体的应用场景和对模型误差的关注重点。在实际应用中，通常会综合考虑多个评估指标来全面评价回归模型的性能。\n\n\n## 回归系数统计性质\n\n### 最小二乘估计的统计性质 (高斯-马尔可夫定理)\n\n在经典线性回归模型的假设条件下（线性性、随机抽样、严格外生性、完全共线性、球型扰动项），最小二乘估计 (OLS) 具有以下优良的统计性质：\n\n- **无偏性 (Unbiasedness)**：OLS估计的系数 $\\hat{\\beta}$ 的期望值等于真实系数 $\\beta$，即 $E(\\hat{\\beta}) = \\beta$。这意味着在多次抽样中，OLS估计的平均值会接近真实值。\n- **有效性 (Efficiency)**：在所有线性无偏估计量中，OLS估计量具有最小的方差。这意味着OLS估计是最精确的线性无偏估计量，也称为最佳线性无偏估计量 (BLUE, Best Linear Unbiased Estimator)。\n- **一致性 (Consistency)**：随着样本容量 $n$ 趋于无穷大，OLS估计量 $\\hat{\\beta}$ 依概率收敛于真实系数 $\\beta$，即 $\\text{plim}_{n\\to\\infty} \\hat{\\beta} = \\beta$。这意味着当样本量足够大时，OLS估计会非常接近真实值。\n- **正态性 (Normality)**：在扰动项 $\\epsilon$ 服从正态分布的假设下，OLS估计量 $\\hat{\\beta}$ 也服从正态分布。这一性质使得我们可以进行基于正态分布的假设检验和置信区间估计。\n\n\n### 假设检验\n\n在回归分析中，假设检验用于评估模型中自变量对因变量的影响是否显著，以及整个模型是否具有统计学意义。\n\n**1. 对单个回归系数的t检验**\n\n- **目的**：检验每个自变量的系数 $\\beta_i$ 是否显著不为零，即该自变量是否对因变量有显著影响。\n- **零假设 ($H_0$)**：$\\beta_i = 0$ (自变量 $x_i$ 对因变量 $y$ 没有线性影响)\n- **备择假设 ($H_1$)**：$\\beta_i \\neq 0$ (自变量 $x_i$ 对因变量 $y$ 有线性影响)\n- **检验统计量**：t统计量，通过系数估计值 $\\hat{\\beta}_i$ 除以其标准误差 $SE(\\hat{\\beta}_i)$ 计算得到。\n- **决策**：将计算得到的t统计量的p值与显著性水平 $\\alpha$ (通常为0.05) 进行比较。若p值小于 $\\alpha$，则拒绝零假设，认为自变量 $x_i$ 对因变量 $y$ 的影响在统计上是显著的。\n\n**2. 对整体模型显著性的F检验**\n\n- **目的**：检验模型中所有自变量是否作为一个整体对因变量有显著影响，即模型是否整体有效。\n- **零假设 ($H_0$)**：$\\beta_1 = \\beta_2 = ... = \\beta_p = 0$ (所有自变量都对因变量没有线性影响，模型整体无效)\n- **备择假设 ($H_1$)**：$\\beta_j \\neq 0$ 至少存在一个 $j$ (至少有一个自变量对因变量有线性影响，模型整体有效)\n- **检验统计量**：F统计量，通过分析模型的方差分解得到，衡量模型解释的变异与未解释的变异之比。\n- **决策**：将计算得到的F统计量的p值与显著性水平 $\\alpha$ 进行比较。若p值小于 $\\alpha$，则拒绝零假设，认为模型作为一个整体对因变量的影响在统计上是显著的。\n\n\n这些性质保证了在满足经典线性回归模型假设的前提下，使用最小二乘法得到的回归系数估计是可靠和有效的。然而，在实际应用中，我们需要检验这些假设是否成立，并根据具体情况选择合适的回归方法。\n\n\n\n### 回归假设不满足时的问题及解决方法\n\n::: {.callout-warning appearance=\"minimal\"}\n## 线性性假设不满足\n\n**问题**：\n\n- 若实际关系不是线性的，模型会系统性地预测不准\n- 残差图会呈现明显的非随机模式（如U形或倒U形）\n\n**解决方法**：\n\n- 对变量进行非线性变换（如对数、平方根、平方等）\n- 添加多项式项（如$x^2$、$x^3$等）\n- 使用样条函数或局部回归等非参数方法\n- 对具体业务关系，考虑使用非线性回归模型\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 非线性关系示例：lstat与房价的关系更像指数关系\n# 比较线性模型与对数变换模型\nmodel_linear <- lm(medv ~ lstat, data = Boston)\nmodel_log <- lm(medv ~ log(lstat), data = Boston)\n\n# 创建预测值\nBoston$pred_linear <- predict(model_linear)\nBoston$pred_log <- predict(model_log)\n\n# 可视化比较\np1 <- ggplot(Boston, aes(x = lstat, y = medv)) +\n  geom_point(alpha = 0.5) +\n  geom_line(aes(y = pred_linear), color = \"red\", size = 1) +\n  labs(title = \"线性模型\",\n       x = \"低收入人口比例(%)\",\n       y = \"房价(千美元)\")\n\np2 <- ggplot(Boston, aes(x = lstat, y = medv)) +\n  geom_point(alpha = 0.5) +\n  geom_line(aes(y = pred_log), color = \"blue\", size = 1) +\n  labs(title = \"对数变换模型\",\n       x = \"低收入人口比例(%)\",\n       y = \"房价(千美元)\")\n\np1 + p2\n```\n\n::: {.cell-output-display}\n![](week6_files/figure-html/unnamed-chunk-3-1.png){width=2400}\n:::\n\n```{.r .cell-code}\n# 比较模型拟合度\ncat(\"线性模型 R² =\", summary(model_linear)$r.squared, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n线性模型 R² = 0.5441463 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"对数变换模型 R² =\", summary(model_log)$r.squared, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n对数变换模型 R² = 0.6649462 \n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.callout-warning appearance=\"minimal\"}\n## 同方差性假设不满足（异方差性）\n\n**问题**：\n\n- 误差的方差不恒定，在某些预测区间的预测更不准确\n- 标准误差估计有偏，导致置信区间和假设检验不可靠\n- 最小二乘估计虽然无偏但不再是最有效的\n\n**解决方法**：\n\n- 对因变量进行变换（如对数变换）\n- 使用加权最小二乘法(WLS)\n- 使用稳健标准误差(Robust Standard Errors)\n- 使用广义线性模型(GLM)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 检测异方差性\nplot(model_linear, which = 1)  # 残差图\n```\n\n::: {.cell-output-display}\n![](week6_files/figure-html/unnamed-chunk-4-1.png){width=2400}\n:::\n\n```{.r .cell-code}\n# 进行BP检验\n# 原假设H0：误差项具有同方差性\n# 备择假设H1：误差项不具有同方差性（存在异方差性）\nlibrary(lmtest)\nbptest(model_linear)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tstudentized Breusch-Pagan test\n\ndata:  model_linear\nBP = 15.497, df = 1, p-value = 8.262e-05\n```\n\n\n:::\n\n```{.r .cell-code}\n# 使用稳健标准误差\n# 当模型存在异方差性时，普通最小二乘法（OLS）系数的标准误差估计会失效，导致推断不可靠。\n# 稳健标准误差提供了一种有效的方法来估计系数的标准误差，即使存在异方差性。\n# 在R中，`sandwich` 包的 `vcovHC` 函数可以计算稳健的协方差矩阵，然后与 `lmtest` 包的 `coeftest` 函数结合使用，进行基于稳健标准误差的系数检验。\n# HC1 是一种常用的稳健标准误差类型。\nlibrary(sandwich)\ncoeftest(model_linear, vcov = vcovHC(model_linear, type = \"HC1\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nt test of coefficients:\n\n             Estimate Std. Error t value  Pr(>|t|)    \n(Intercept) 34.553841   0.754199  45.815 < 2.2e-16 ***\nlstat       -0.950049   0.049605 -19.152 < 2.2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n```{.r .cell-code}\n# 加权最小二乘法示例：当误差项方差不齐时，WLS通过赋予不同观测点不同的权重来优化模型，通常权重与方差成反比。\n# 计算残差的绝对值\nabs_resid <- abs(residuals(model_linear))\n# 基于预测值拟合残差模型\nweight_model <- lm(abs_resid ~ fitted(model_linear))\n# 计算权重\nweights <- 1 / (fitted(weight_model)^2)\n# 拟合WLS模型\nwls_model <- lm(medv ~ lstat, data = Boston, weights = weights)\n\n# 比较结果\nsummary(model_linear)$coefficients\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n              Estimate Std. Error   t value      Pr(>|t|)\n(Intercept) 34.5538409 0.56262735  61.41515 3.743081e-236\nlstat       -0.9500494 0.03873342 -24.52790  5.081103e-88\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(wls_model)$coefficients\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n              Estimate Std. Error   t value      Pr(>|t|)\n(Intercept) 31.5869876 0.54902271  57.53312 1.213416e-223\nlstat       -0.7295561 0.02944518 -24.77676  3.134190e-89\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.callout-warning appearance=\"minimal\"}\n## 独立性假设不满足（自相关）\n\n**问题**：\n\n- 误差项之间存在相关性，常见于时间序列数据\n- 标准误差估计有偏，影响推断的有效性\n- 预测区间不准确\n\n**解决方法**：\n\n- 增加漏掉的解释变量\n- 纳入滞后项或时间趋势\n- 使用广义最小二乘法(GLS)\n- 对时间序列数据使用ARIMA等专门模型\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 创建一个人为的自相关序列\nset.seed(123)\nn <- 100\ntime <- 1:n\ntrend <- 0.5 * time\nerror <- arima.sim(list(ar = 0.8), n)\ny <- trend + error\ndata_ts <- data.frame(time = time, y = y)\n\n# 拟合简单线性模型\nts_model <- lm(y ~ time, data = data_ts)\nsummary(ts_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = y ~ time, data = data_ts)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-3.1652 -0.9830 -0.1245  0.7012  4.2521 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 0.835800   0.276027   3.028  0.00315 ** \ntime        0.485589   0.004745 102.330  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.37 on 98 degrees of freedom\nMultiple R-squared:  0.9907,\tAdjusted R-squared:  0.9906 \nF-statistic: 1.047e+04 on 1 and 98 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n\n```{.r .cell-code}\n# 检测自相关性\nlibrary(lmtest)\n# Durbin-Watson检验\n# 原假设H0：误差项不存在自相关性\n# 备择假设H1：误差项存在自相关性\ndwtest(ts_model)  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tDurbin-Watson test\n\ndata:  ts_model\nDW = 0.45546, p-value = 1.324e-15\nalternative hypothesis: true autocorrelation is greater than 0\n```\n\n\n:::\n\n```{.r .cell-code}\n# 可视化残差\npar(mfrow = c(1, 2))\nplot(residuals(ts_model), type = \"l\", main = \"残差时间序列\")\nacf(residuals(ts_model), main = \"残差自相关函数\")\n```\n\n::: {.cell-output-display}\n![](week6_files/figure-html/unnamed-chunk-5-1.png){width=2400}\n:::\n\n```{.r .cell-code}\n# 使用广义最小二乘法纠正自相关\nlibrary(nlme)\ngls_model <- gls(y ~ time, data = data_ts, correlation = corAR1())\nsummary(gls_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeneralized least squares fit by REML\n  Model: y ~ time \n  Data: data_ts \n       AIC      BIC    logLik\n  271.5459 281.8857 -131.7729\n\nCorrelation Structure: AR(1)\n Formula: ~1 \n Parameter estimate(s):\n      Phi \n0.8240619 \n\nCoefficients:\n                Value Std.Error  t-value p-value\n(Intercept) 0.2796805 0.9025675  0.30987  0.7573\ntime        0.4943710 0.0151567 32.61735  0.0000\n\n Correlation: \n     (Intr)\ntime -0.848\n\nStandardized residuals:\n        Min          Q1         Med          Q3         Max \n-1.74572651 -0.50538885  0.04785484  0.59576388  2.69940933 \n\nResidual standard error: 1.553479 \nDegrees of freedom: 100 total; 98 residual\n```\n\n\n:::\n\n```{.r .cell-code}\n# 重置图形参数\npar(mfrow = c(1, 1))\n```\n:::\n\n\n\n:::\n\n::: {.callout-warning appearance=\"minimal\"}\n## 正态性假设不满足\n\n**问题**：\n\n- 对小样本影响较大，使用t检验和F检验可能不可靠\n- 异常值对回归分析的影响过大\n\n**解决方法**：\n\n- 对异常值进行识别与处理\n- 尝试对因变量进行变换（如Box-Cox变换）\n- 使用非参数方法或稳健回归\n- 对大样本，由于中心极限定理，影响相对较小\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 检验残差正态性\nshapiro.test(residuals(model_linear))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tShapiro-Wilk normality test\n\ndata:  residuals(model_linear)\nW = 0.87857, p-value < 2.2e-16\n```\n\n\n:::\n\n```{.r .cell-code}\n# 残差QQ图\nqqnorm(residuals(model_linear))\nqqline(residuals(model_linear))\n```\n\n::: {.cell-output-display}\n![](week6_files/figure-html/unnamed-chunk-6-1.png){width=2400}\n:::\n\n```{.r .cell-code}\n# Box-Cox变换\nlibrary(MASS)\nbc <- boxcox(model_linear)\n```\n\n::: {.cell-output-display}\n![](week6_files/figure-html/unnamed-chunk-6-2.png){width=2400}\n:::\n\n```{.r .cell-code}\nlambda <- bc$x[which.max(bc$y)]\ncat(\"最优Box-Cox变换参数λ =\", lambda, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n最优Box-Cox变换参数λ = 0.02020202 \n```\n\n\n:::\n\n```{.r .cell-code}\n# 应用Box-Cox变换\nif(abs(lambda) < 0.001) {\n  Boston$trans_medv <- log(Boston$medv)  # λ接近0时使用对数变换\n} else {\n  Boston$trans_medv <- (Boston$medv^lambda - 1) / lambda\n}\n\n# 拟合变换后的模型\ntrans_model <- lm(trans_medv ~ lstat, data = Boston)\nshapiro.test(residuals(trans_model))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tShapiro-Wilk normality test\n\ndata:  residuals(trans_model)\nW = 0.9711, p-value = 1.938e-08\n```\n\n\n:::\n\n```{.r .cell-code}\n# 稳健回归\nlibrary(MASS)\nrobust_model <- rlm(medv ~ lstat, data = Boston)\nsummary(robust_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall: rlm(formula = medv ~ lstat, data = Boston)\nResiduals:\n     Min       1Q   Median       3Q      Max \n-13.7025  -2.9250  -0.4713   3.0462  25.8080 \n\nCoefficients:\n            Value    Std. Error t value \n(Intercept)  32.3389   0.4273    75.6866\nlstat        -0.8549   0.0294   -29.0623\n\nResidual standard error: 4.358 on 504 degrees of freedom\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.callout-warning appearance=\"minimal\"}\n## 多重共线性（多元回归中的问题）\n\n**问题**：\n\n- 自变量之间高度相关，导致系数估计不稳定\n- 标准误差增大，显著性检验不可靠\n- 模型解释能力下降\n\n**解决方法**：\n\n- 删除高度相关的变量\n- 使用变量选择方法（如逐步回归）\n- 主成分回归或偏最小二乘回归\n- 岭回归或Lasso等正则化方法\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 多元回归示例\nmulti_model <- lm(medv ~ rm + lstat + crim + nox, data = Boston)\n\n# 检测多重共线性\nlibrary(car)\nvif(multi_model)  # VIF > 10表示严重的多重共线性\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      rm    lstat     crim      nox \n1.626591 2.440211 1.327046 1.618307 \n```\n\n\n:::\n\n```{.r .cell-code}\n# 相关矩阵\ncor_matrix <- cor(Boston[, c(\"rm\", \"lstat\", \"crim\", \"nox\")])\nprint(cor_matrix)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n              rm      lstat       crim        nox\nrm     1.0000000 -0.6138083 -0.2192467 -0.3021882\nlstat -0.6138083  1.0000000  0.4556215  0.5908789\ncrim  -0.2192467  0.4556215  1.0000000  0.4209717\nnox   -0.3021882  0.5908789  0.4209717  1.0000000\n```\n\n\n:::\n\n```{.r .cell-code}\n# 岭回归示例\nlibrary(MASS)\nridge_model <- lm.ridge(medv ~ rm + lstat + crim + nox, data = Boston, lambda = seq(0, 1, 0.01))\nplot(ridge_model)  # 绘制岭迹图\n```\n\n::: {.cell-output-display}\n![](week6_files/figure-html/unnamed-chunk-7-1.png){width=2400}\n:::\n\n```{.r .cell-code}\n# 选择最优lambda值\noptimal_lambda <- ridge_model$lambda[which.min(ridge_model$GCV)]\ncat(\"最优岭参数λ =\", optimal_lambda, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n最优岭参数λ = 1 \n```\n\n\n:::\n\n```{.r .cell-code}\nridge_coef <- coef(ridge_model)[which(ridge_model$lambda == optimal_lambda), ]\nprint(ridge_coef)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   rm      lstat       crim        nox \n-2.4799828  5.2144817 -0.5758662 -0.1027447 -0.1813245 \n```\n\n\n:::\n:::\n\n\n\n:::\n\n### R语言实现简单线性回归\n\n**基本函数**：\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 以rm(房间数)预测房价为例\n# 建立简单线性回归模型\nlm_model <- lm(medv ~ rm, data = Boston)\n\n# 使用 broom 包获取模型摘要信息\nlibrary(broom)\n\n# 获取整洁的模型系数\ntidy(lm_model, conf.int = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 7\n  term        estimate std.error statistic  p.value conf.low conf.high\n  <chr>          <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl>\n1 (Intercept)   -34.7      2.65      -13.1 6.95e-34   -39.9     -29.5 \n2 rm              9.10     0.419      21.7 2.49e-74     8.28      9.93\n```\n\n\n:::\n\n```{.r .cell-code}\n# 获取整洁的模型摘要统计量\nglance(lm_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic  p.value    df logLik   AIC   BIC\n      <dbl>         <dbl> <dbl>     <dbl>    <dbl> <dbl>  <dbl> <dbl> <dbl>\n1     0.484         0.483  6.62      472. 2.49e-74     1 -1673. 3352. 3365.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n```\n\n\n:::\n\n```{.r .cell-code}\n# 模型预测\nnew_data <- tibble(rm = c(5, 6, 7, 8))\n\n# 使用 augment 获取带预测值和残差的数据框\naugmented_data <- augment(lm_model, newdata = new_data, interval = \"confidence\")\naugmented_prediction <- augment(lm_model, newdata = new_data, interval = \"prediction\")\naugmented_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 4\n     rm .fitted .lower .upper\n  <dbl>   <dbl>  <dbl>  <dbl>\n1     5    10.8   9.63   12.0\n2     6    19.9  19.3    20.6\n3     7    29.0  28.2    29.9\n4     8    38.1  36.6    39.7\n```\n\n\n:::\n\n```{.r .cell-code}\naugmented_prediction\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 4\n     rm .fitted .lower .upper\n  <dbl>   <dbl>  <dbl>  <dbl>\n1     5    10.8  -2.21   23.9\n2     6    19.9   6.93   33.0\n3     7    29.0  16.0    42.1\n4     8    38.1  25.1    51.2\n```\n\n\n:::\n\n```{.r .cell-code}\n# 回归诊断图\n# 使用 ggfortify 包可以绘制更美观的回归诊断图，它是 ggplot2 的扩展包\nlibrary(ggfortify)\nautoplot(lm_model)\n```\n\n::: {.cell-output-display}\n![](week6_files/figure-html/unnamed-chunk-8-1.png){width=2400}\n:::\n:::\n\n\n\n\n**结果解读**：\n\n- **系数估计值**：截距($\\hat{\\beta}_0$)和斜率($\\hat{\\beta}_1$)的估计值\n- **标准误差**：系数估计值的标准误差，表示估计的精确度\n- **t值**：系数估计值与标准误差的比值，用于检验系数是否显著不为0\n- **p值**：系数是否显著不为0的显著性水平\n- **R²值**：模型解释的方差比例，衡量拟合优度\n- **F统计量**：整个模型的显著性检验\n\n## 第十二次课：多元线性回归模型\n\n::: {.callout-note appearance=\"minimal\"}\n## 本节课重点\n\n在上节课我们学习了线性回归的基本原理和简单线性回归模型。本节课我们将扩展到多元线性回归模型，并特别关注多变量回归分析中的一个核心问题：**变量选择**。\n\n在实际应用中，我们通常有很多潜在的自变量可以纳入模型。如何从众多变量中选择最优的变量组合，是构建高效回归模型的关键步骤。本节课将介绍各种变量选择的方法、标准和实用技巧，帮助我们构建既有预测能力又有解释力的回归模型。\n:::\n\n### 多元线性回归模型\n\n::: {.callout-note}\n## 多元线性回归的意义\n\n在商业环境中，一个因变量往往受多个因素影响。例如，销售额不仅受电视广告的影响，还可能受广播、报纸、社交媒体等多种营销渠道的影响。多元线性回归能够同时考虑多个自变量的影响，更全面地分析因素间的关系。\n:::\n\n::: {.callout-important}\n## 模型形式\n\n$y = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2 + \\dots + \\beta_p x_p + \\epsilon$\n\n- $y$：因变量\n- $x_1, x_2, \\dots, x_p$：$p$个自变量\n- $\\beta_0$：截距\n- $\\beta_1, \\beta_2, \\dots, \\beta_p$：偏回归系数，控制其他自变量不变时，每个自变量对因变量的边际影响\n- $\\epsilon$：随机误差项\n:::\n\n::: {.callout-hint}\n## 偏回归系数的解释\n\n- $\\beta_1$表示在其他自变量$x_2, \\dots, x_p$保持不变的情况下，自变量$x_1$每增加一个单位，因变量$y$的平均变化量\n\n这个解释非常重要，因为它体现了\"控制变量\"的思想，即我们能够分离出单个自变量的\"净效应\"。这在商业分析中尤为有用，例如，我们可以分析在广播广告投入不变的情况下，增加电视广告对销售的边际贡献。\n:::\n\n### 变量选择问题\n\n::: {.callout-note}\n## 为什么需要变量选择\n\n在多元回归分析中，并非所有可能的自变量都对模型有显著贡献。变量选择旨在从众多潜在自变量中筛选出最重要的变量，构建既简洁又高效的模型。变量选择的主要目的包括：\n\n1. **提高模型解释力**：删除无关变量，使模型更聚焦于真正有影响的因素\n2. **增强预测能力**：简化模型可以减少过拟合风险，提高在新数据上的预测准确性\n3. **降低计算复杂度**：减少模型中的变量数量可以简化计算\n4. **避免多重共线性**：排除高度相关的变量，提高参数估计的稳定性\n5. **增强模型可解释性**：更少的变量意味着模型更易于理解和解释\n:::\n\n::: {.callout-caution}\n## 变量选择的挑战\n\n- **组合爆炸**：对于p个自变量，存在$2^p$种可能的模型组合\n- **模型不确定性**：不同的选择标准可能导致不同的\"最优\"模型\n- **数据驱动vs理论驱动**：纯粹数据驱动的变量选择可能忽略重要的理论考量\n- **过度拟合风险**：过度使用统计标准进行变量选择可能导致过拟合\n:::\n\n### 变量选择的方法\n\n#### 传统变量选择方法\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 使用波士顿房价数据集进行变量选择示例\nlibrary(MASS)\ndata(Boston)\n\n# 构建包含所有变量的完整模型\nfull_model <- lm(medv ~ ., data = Boston)\nsummary(full_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = medv ~ ., data = Boston)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-15.595  -2.730  -0.518   1.777  26.199 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  3.646e+01  5.103e+00   7.144 3.28e-12 ***\ncrim        -1.080e-01  3.286e-02  -3.287 0.001087 ** \nzn           4.642e-02  1.373e-02   3.382 0.000778 ***\nindus        2.056e-02  6.150e-02   0.334 0.738288    \nchas         2.687e+00  8.616e-01   3.118 0.001925 ** \nnox         -1.777e+01  3.820e+00  -4.651 4.25e-06 ***\nrm           3.810e+00  4.179e-01   9.116  < 2e-16 ***\nage          6.922e-04  1.321e-02   0.052 0.958229    \ndis         -1.476e+00  1.995e-01  -7.398 6.01e-13 ***\nrad          3.060e-01  6.635e-02   4.613 5.07e-06 ***\ntax         -1.233e-02  3.760e-03  -3.280 0.001112 ** \nptratio     -9.527e-01  1.308e-01  -7.283 1.31e-12 ***\nblack        9.312e-03  2.686e-03   3.467 0.000573 ***\nlstat       -5.248e-01  5.072e-02 -10.347  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.745 on 492 degrees of freedom\nMultiple R-squared:  0.7406,\tAdjusted R-squared:  0.7338 \nF-statistic: 108.1 on 13 and 492 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n:::\n\n\n\n\n::: {.callout-tip}\n## 1. 向前逐步回归 (Forward Stepwise)\n\n从一个没有自变量的模型开始（只有截距），然后每次添加一个最能提高模型拟合度的变量，直到没有变量能显著改善模型或达到预定的停止标准。\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 向前逐步回归\nnull_model <- lm(medv ~ 1, data = Boston)  # 仅含截距的模型\nforward_model <- step(null_model, scope = list(lower = null_model, upper = full_model), \n                    direction = \"forward\", trace = FALSE)\n\n# 查看最终模型\nsummary(forward_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = medv ~ lstat + rm + ptratio + dis + nox + chas + \n    black + zn + crim + rad + tax, data = Boston)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-15.5984  -2.7386  -0.5046   1.7273  26.2373 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  36.341145   5.067492   7.171 2.73e-12 ***\nlstat        -0.522553   0.047424 -11.019  < 2e-16 ***\nrm            3.801579   0.406316   9.356  < 2e-16 ***\nptratio      -0.946525   0.129066  -7.334 9.24e-13 ***\ndis          -1.492711   0.185731  -8.037 6.84e-15 ***\nnox         -17.376023   3.535243  -4.915 1.21e-06 ***\nchas          2.718716   0.854240   3.183 0.001551 ** \nblack         0.009291   0.002674   3.475 0.000557 ***\nzn            0.045845   0.013523   3.390 0.000754 ***\ncrim         -0.108413   0.032779  -3.307 0.001010 ** \nrad           0.299608   0.063402   4.726 3.00e-06 ***\ntax          -0.011778   0.003372  -3.493 0.000521 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.736 on 494 degrees of freedom\nMultiple R-squared:  0.7406,\tAdjusted R-squared:  0.7348 \nF-statistic: 128.2 on 11 and 494 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n\n```{.r .cell-code}\n# 查看选择过程\nstep(null_model, scope = list(lower = null_model, upper = full_model), \n    direction = \"forward\", trace = TRUE, steps = 2)  # 仅显示前两步以节省空间\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nStart:  AIC=2246.51\nmedv ~ 1\n\n          Df Sum of Sq   RSS    AIC\n+ lstat    1   23243.9 19472 1851.0\n+ rm       1   20654.4 22062 1914.2\n+ ptratio  1   11014.3 31702 2097.6\n+ indus    1    9995.2 32721 2113.6\n+ tax      1    9377.3 33339 2123.1\n+ nox      1    7800.1 34916 2146.5\n+ crim     1    6440.8 36276 2165.8\n+ rad      1    6221.1 36495 2168.9\n+ age      1    6069.8 36647 2171.0\n+ zn       1    5549.7 37167 2178.1\n+ black    1    4749.9 37966 2188.9\n+ dis      1    2668.2 40048 2215.9\n+ chas     1    1312.1 41404 2232.7\n<none>                 42716 2246.5\n\nStep:  AIC=1851.01\nmedv ~ lstat\n\n          Df Sum of Sq   RSS    AIC\n+ rm       1    4033.1 15439 1735.6\n+ ptratio  1    2670.1 16802 1778.4\n+ chas     1     786.3 18686 1832.2\n+ dis      1     772.4 18700 1832.5\n+ age      1     304.3 19168 1845.0\n+ tax      1     274.4 19198 1845.8\n+ black    1     198.3 19274 1847.8\n+ zn       1     160.3 19312 1848.8\n+ crim     1     146.9 19325 1849.2\n+ indus    1      98.7 19374 1850.4\n<none>                 19472 1851.0\n+ rad      1      25.1 19447 1852.4\n+ nox      1       4.8 19468 1852.9\n\nStep:  AIC=1735.58\nmedv ~ lstat + rm\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = medv ~ lstat + rm, data = Boston)\n\nCoefficients:\n(Intercept)        lstat           rm  \n    -1.3583      -0.6424       5.0948  \n```\n\n\n:::\n:::\n\n\n\n\n::: {.callout-tip}\n## 2. 向后逐步回归 (Backward Stepwise)\n\n从一个包含所有自变量的模型开始，然后每次删除一个对模型贡献最小的变量，直到所有剩余变量都对模型有显著贡献。\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 向后逐步回归\nbackward_model <- step(full_model, direction = \"backward\", trace = FALSE)\n\n# 查看最终模型\nsummary(backward_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = medv ~ crim + zn + chas + nox + rm + dis + rad + \n    tax + ptratio + black + lstat, data = Boston)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-15.5984  -2.7386  -0.5046   1.7273  26.2373 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  36.341145   5.067492   7.171 2.73e-12 ***\ncrim         -0.108413   0.032779  -3.307 0.001010 ** \nzn            0.045845   0.013523   3.390 0.000754 ***\nchas          2.718716   0.854240   3.183 0.001551 ** \nnox         -17.376023   3.535243  -4.915 1.21e-06 ***\nrm            3.801579   0.406316   9.356  < 2e-16 ***\ndis          -1.492711   0.185731  -8.037 6.84e-15 ***\nrad           0.299608   0.063402   4.726 3.00e-06 ***\ntax          -0.011778   0.003372  -3.493 0.000521 ***\nptratio      -0.946525   0.129066  -7.334 9.24e-13 ***\nblack         0.009291   0.002674   3.475 0.000557 ***\nlstat        -0.522553   0.047424 -11.019  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.736 on 494 degrees of freedom\nMultiple R-squared:  0.7406,\tAdjusted R-squared:  0.7348 \nF-statistic: 128.2 on 11 and 494 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n\n```{.r .cell-code}\n# 比较向前和向后方法的结果\ncat(\"向前逐步回归选择的变量：\", \n    paste(names(coef(forward_model))[-1], collapse = \", \"), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n向前逐步回归选择的变量： lstat, rm, ptratio, dis, nox, chas, black, zn, crim, rad, tax \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"向后逐步回归选择的变量：\", \n    paste(names(coef(backward_model))[-1], collapse = \", \"), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n向后逐步回归选择的变量： crim, zn, chas, nox, rm, dis, rad, tax, ptratio, black, lstat \n```\n\n\n:::\n:::\n\n\n\n\n::: {.callout-tip}\n## 3. 双向逐步回归 (Stepwise)\n\n结合向前和向后方法，每一步可以添加或删除变量。在每次添加变量后，会重新评估所有已经在模型中的变量，可能删除不再显著的变量。\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 双向逐步回归\nstepwise_model <- step(null_model, scope = list(lower = null_model, upper = full_model), \n                      direction = \"both\", trace = FALSE)\n\n# 查看最终模型\nsummary(stepwise_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = medv ~ lstat + rm + ptratio + dis + nox + chas + \n    black + zn + crim + rad + tax, data = Boston)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-15.5984  -2.7386  -0.5046   1.7273  26.2373 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  36.341145   5.067492   7.171 2.73e-12 ***\nlstat        -0.522553   0.047424 -11.019  < 2e-16 ***\nrm            3.801579   0.406316   9.356  < 2e-16 ***\nptratio      -0.946525   0.129066  -7.334 9.24e-13 ***\ndis          -1.492711   0.185731  -8.037 6.84e-15 ***\nnox         -17.376023   3.535243  -4.915 1.21e-06 ***\nchas          2.718716   0.854240   3.183 0.001551 ** \nblack         0.009291   0.002674   3.475 0.000557 ***\nzn            0.045845   0.013523   3.390 0.000754 ***\ncrim         -0.108413   0.032779  -3.307 0.001010 ** \nrad           0.299608   0.063402   4.726 3.00e-06 ***\ntax          -0.011778   0.003372  -3.493 0.000521 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.736 on 494 degrees of freedom\nMultiple R-squared:  0.7406,\tAdjusted R-squared:  0.7348 \nF-statistic: 128.2 on 11 and 494 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n:::\n\n\n\n\n#### 最优子集选择 (Best Subset Selection)\n\n::: {.callout-important}\n## 最优子集选择\n\n最优子集选择方法会考虑所有可能的模型组合，从中选择基于某些标准（如AIC、BIC、调整R²等）的最优模型。这种方法在计算上比逐步回归更为密集，但能找到全局最优解。\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 使用leaps包进行最优子集选择\nlibrary(leaps)\n\n# 执行最优子集选择\nsubsets <- regsubsets(medv ~ ., data = Boston, nvmax = 13)  # 最多考虑13个变量\nsubset_summary <- summary(subsets)\n\n# 比较不同标准下的最佳模型\npar(mfrow = c(2, 2))\nplot(subset_summary$rss, xlab = \"变量数量\", ylab = \"RSS\", type = \"b\")\nplot(subset_summary$adjr2, xlab = \"变量数量\", ylab = \"调整R²\", type = \"b\")\npoints(which.max(subset_summary$adjr2), subset_summary$adjr2[which.max(subset_summary$adjr2)], \n       col = \"red\", cex = 2, pch = 20)\nplot(subset_summary$cp, xlab = \"变量数量\", ylab = \"Cp\", type = \"b\")\npoints(which.min(subset_summary$cp), subset_summary$cp[which.min(subset_summary$cp)], \n       col = \"red\", cex = 2, pch = 20)\nplot(subset_summary$bic, xlab = \"变量数量\", ylab = \"BIC\", type = \"b\")\npoints(which.min(subset_summary$bic), subset_summary$bic[which.min(subset_summary$bic)], \n       col = \"red\", cex = 2, pch = 20)\n```\n\n::: {.cell-output-display}\n![](week6_files/figure-html/unnamed-chunk-13-1.png){width=2400}\n:::\n\n```{.r .cell-code}\npar(mfrow = c(1, 1))\n\n# 查看各标准下的最佳模型\ncat(\"调整R²最大的模型包含\", which.max(subset_summary$adjr2), \"个变量\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n调整R²最大的模型包含 11 个变量\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Cp最小的模型包含\", which.min(subset_summary$cp), \"个变量\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCp最小的模型包含 11 个变量\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"BIC最小的模型包含\", which.min(subset_summary$bic), \"个变量\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nBIC最小的模型包含 11 个变量\n```\n\n\n:::\n\n```{.r .cell-code}\n# 展示BIC最小模型的变量\ncoef(subsets, which.min(subset_summary$bic))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  (Intercept)          crim            zn          chas           nox \n 36.341145004  -0.108413345   0.045844929   2.718716303 -17.376023429 \n           rm           dis           rad           tax       ptratio \n  3.801578840  -1.492711460   0.299608454  -0.011777973  -0.946524570 \n        black         lstat \n  0.009290845  -0.522553457 \n```\n\n\n:::\n:::\n\n\n\n\n#### 正则化方法\n\n::: {.callout-warning}\n## 正则化方法的优势\n\n传统变量选择方法（如逐步回归和最优子集）存在一些局限性，如过拟合风险和不稳定性。正则化方法通过在模型中加入惩罚项，可以同时进行变量选择和系数收缩，解决这些问题。\n:::\n\n::: {.callout-tip}\n## 1. 岭回归 (Ridge Regression)\n\n岭回归通过添加基于系数平方和的惩罚项($L_2$范数)来控制系数大小，适用于处理多重共线性。岭回归不会将系数精确压缩到零，因此不直接进行变量选择，但可以显著减小无关变量的影响。\n\n$$\\min_{\\beta} \\left\\{ \\sum_{i=1}^{n} (y_i - \\beta_0 - \\sum_{j=1}^{p} \\beta_j x_{ij})^2 + \\lambda \\sum_{j=1}^{p} \\beta_j^2 \\right\\}$$\n\n其中$\\lambda$是调节惩罚强度的参数。\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 岭回归示例\nlibrary(glmnet)\n\n# 准备数据\nx <- as.matrix(Boston[, -14])  # 不包括medv变量的所有特征\ny <- Boston$medv\n\n# 执行岭回归\nset.seed(42)\nridge_cv <- cv.glmnet(x, y, alpha = 0, nfolds = 10)  # alpha=0表示岭回归\n\n# 绘制交叉验证结果\nplot(ridge_cv)\n```\n\n::: {.cell-output-display}\n![](week6_files/figure-html/unnamed-chunk-14-1.png){width=2400}\n:::\n\n```{.r .cell-code}\n# 最优lambda值\nbest_lambda_ridge <- ridge_cv$lambda.min\ncat(\"岭回归的最优lambda值:\", best_lambda_ridge, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n岭回归的最优lambda值: 0.6777654 \n```\n\n\n:::\n\n```{.r .cell-code}\n# 使用最优lambda拟合模型\nridge_model <- glmnet(x, y, alpha = 0, lambda = best_lambda_ridge)\nridge_coef <- coef(ridge_model)\nprint(ridge_coef)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n14 x 1 sparse Matrix of class \"dgCMatrix\"\n                       s0\n(Intercept)  28.051686825\ncrim         -0.087904300\nzn            0.032606201\nindus        -0.038328191\nchas          2.902980774\nnox         -12.005369287\nrm            4.014163735\nage          -0.003862644\ndis          -1.120903830\nrad           0.154161048\ntax          -0.005729860\nptratio      -0.855862908\nblack         0.009068108\nlstat        -0.471596371\n```\n\n\n:::\n\n```{.r .cell-code}\n# 绘制系数变化路径\nlambda_seq <- 10^seq(2, -3, length = 100)\nridge_path <- glmnet(x, y, alpha = 0, lambda = lambda_seq)\nplot(ridge_path, xvar = \"lambda\", label = TRUE)\n```\n\n::: {.cell-output-display}\n![](week6_files/figure-html/unnamed-chunk-14-2.png){width=2400}\n:::\n:::\n\n\n\n\n::: {.callout-tip}\n## 2. Lasso回归 (Least Absolute Shrinkage and Selection Operator)\n\nLasso回归添加基于系数绝对值和的惩罚项($L_1$范数)，可以将某些系数精确压缩到零，从而实现变量选择。这使得Lasso特别适用于高维数据的特征选择。\n\n$$\\min_{\\beta} \\left\\{ \\sum_{i=1}^{n} (y_i - \\beta_0 - \\sum_{j=1}^{p} \\beta_j x_{ij})^2 + \\lambda \\sum_{j=1}^{p} |\\beta_j| \\right\\}$$\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Lasso回归示例\nset.seed(42)\nlasso_cv <- cv.glmnet(x, y, alpha = 1, nfolds = 10)  # alpha=1表示Lasso回归\n\n# 绘制交叉验证结果\nplot(lasso_cv)\n```\n\n::: {.cell-output-display}\n![](week6_files/figure-html/unnamed-chunk-15-1.png){width=2400}\n:::\n\n```{.r .cell-code}\n# 最优lambda值\nbest_lambda_lasso <- lasso_cv$lambda.min\ncat(\"Lasso回归的最优lambda值:\", best_lambda_lasso, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLasso回归的最优lambda值: 0.02118502 \n```\n\n\n:::\n\n```{.r .cell-code}\n# 使用最优lambda拟合模型\nlasso_model <- glmnet(x, y, alpha = 1, lambda = best_lambda_lasso)\nlasso_coef <- coef(lasso_model)\n\n# 转换为矩阵后再进行操作\nlasso_coef_matrix <- as.matrix(lasso_coef)\nselected_vars <- rownames(lasso_coef_matrix)[lasso_coef_matrix != 0][-1]  # 去掉截距项\ncat(\"Lasso选择的变量:\", paste(selected_vars, collapse = \", \"), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLasso选择的变量: crim, zn, chas, nox, rm, dis, rad, tax, ptratio, black, lstat \n```\n\n\n:::\n\n```{.r .cell-code}\n# 绘制系数变化路径\nlasso_path <- glmnet(x, y, alpha = 1, lambda = lambda_seq)\nplot(lasso_path, xvar = \"lambda\", label = TRUE)\n```\n\n::: {.cell-output-display}\n![](week6_files/figure-html/unnamed-chunk-15-2.png){width=2400}\n:::\n:::\n\n\n\n\n::: {.callout-tip}\n## 3. 弹性网络 (Elastic Net)\n\n弹性网络结合了岭回归和Lasso回归的优点，同时使用$L_1$和$L_2$惩罚项。这种方法在处理高度相关变量时比Lasso更稳定，并保留了Lasso的变量选择能力。\n\n$$\\min_{\\beta} \\left\\{ \\sum_{i=1}^{n} (y_i - \\beta_0 - \\sum_{j=1}^{p} \\beta_j x_{ij})^2 + \\lambda \\left[ (1-\\alpha) \\sum_{j=1}^{p} \\beta_j^2 + \\alpha \\sum_{j=1}^{p} |\\beta_j| \\right] \\right\\}$$\n\n其中$\\alpha$是混合参数，控制$L_1$和$L_2$惩罚的比例。\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 弹性网络示例\nset.seed(42)\nelastic_cv <- cv.glmnet(x, y, alpha = 0.5, nfolds = 10)  # alpha=0.5表示弹性网络\n\n# 绘制交叉验证结果\nplot(elastic_cv)\n```\n\n::: {.cell-output-display}\n![](week6_files/figure-html/unnamed-chunk-16-1.png){width=2400}\n:::\n\n```{.r .cell-code}\n# 最优lambda值\nbest_lambda_elastic <- elastic_cv$lambda.min\ncat(\"弹性网络的最优lambda值:\", best_lambda_elastic, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n弹性网络的最优lambda值: 0.038606 \n```\n\n\n:::\n\n```{.r .cell-code}\n# 使用最优lambda拟合模型\nelastic_model <- glmnet(x, y, alpha = 0.5, lambda = best_lambda_elastic)\nelastic_coef <- coef(elastic_model)\n\n# 转换为矩阵后再进行操作\nelastic_coef_matrix <- as.matrix(elastic_coef)\n\n# 计算非零系数的数量\nelastic_non_zero <- sum(elastic_coef_matrix[-1] != 0)\ncat(\"弹性网络选择的变量数量:\", elastic_non_zero, \"个\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n弹性网络选择的变量数量: 11 个\n```\n\n\n:::\n\n```{.r .cell-code}\n# 显示选择的变量\nelastic_selected_vars <- rownames(elastic_coef_matrix)[elastic_coef_matrix != 0][-1]  # 去掉截距项\ncat(\"弹性网络选择的变量:\", paste(elastic_selected_vars, collapse = \", \"), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n弹性网络选择的变量: crim, zn, chas, nox, rm, dis, rad, tax, ptratio, black, lstat \n```\n\n\n:::\n:::\n\n\n\n\n### 变量选择方法的比较\n\n不同的变量选择方法各有优缺点，可能会选出不同的变量组合。下面我们比较一下前面介绍的几种方法：\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 预处理数据，为交叉验证作准备\nset.seed(123)\ntrain_idx <- sample(nrow(Boston), 0.7 * nrow(Boston))\ntrain_data <- Boston[train_idx, ]\ntest_data <- Boston[-train_idx, ]\n\n# 在训练集上拟合不同的模型\n# 1. 完整模型\ntrain_full <- lm(medv ~ ., data = train_data)\n\n# 2. 向前逐步回归\ntrain_forward <- step(lm(medv ~ 1, data = train_data), \n                     scope = list(lower = lm(medv ~ 1, data = train_data), \n                                  upper = lm(medv ~ ., data = train_data)), \n                     direction = \"forward\", trace = FALSE)\n\n# 3. 准备Lasso和弹性网络的数据\nx_train <- as.matrix(train_data[, -14])  # 不包括medv的所有特征\ny_train <- train_data$medv\nx_test <- as.matrix(test_data[, -14])\n\n# 拟合Lasso模型\nset.seed(42)\nlasso_cv <- cv.glmnet(x_train, y_train, alpha = 1, nfolds = 10)\ntrain_lasso <- glmnet(x_train, y_train, alpha = 1, lambda = lasso_cv$lambda.min)\n\n# 拟合弹性网络模型\nset.seed(42)\nelastic_cv <- cv.glmnet(x_train, y_train, alpha = 0.5, nfolds = 10)\ntrain_elastic <- glmnet(x_train, y_train, alpha = 0.5, lambda = elastic_cv$lambda.min)\n\n# 在测试集上评估模型\npred_full <- predict(train_full, newdata = test_data)\npred_forward <- predict(train_forward, newdata = test_data)\npred_lasso <- predict(train_lasso, newx = x_test)\npred_elastic <- predict(train_elastic, newx = x_test)\n\n# 计算测试集上的RMSE\nrmse_full <- sqrt(mean((test_data$medv - pred_full)^2))\nrmse_forward <- sqrt(mean((test_data$medv - pred_forward)^2))\nrmse_lasso <- sqrt(mean((test_data$medv - pred_lasso)^2))\nrmse_elastic <- sqrt(mean((test_data$medv - pred_elastic)^2))\n\n# 计算各模型选择的变量数量\nlasso_coef_matrix <- as.matrix(coef(train_lasso))\nelastic_coef_matrix <- as.matrix(coef(train_elastic))\n\n# 比较结果\nresults <- data.frame(\n  模型 = c(\"完整模型\", \"向前逐步回归\", \"Lasso回归\", \"弹性网络\"),\n  变量数 = c(length(coef(train_full)) - 1, \n            length(coef(train_forward)) - 1, \n            sum(lasso_coef_matrix[-1] != 0),\n            sum(elastic_coef_matrix[-1] != 0)),\n  测试集RMSE = c(rmse_full, rmse_forward, rmse_lasso, rmse_elastic)\n)\n\nprint(results)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          模型 变量数 测试集RMSE\n1     完整模型     13   4.802811\n2 向前逐步回归     11   4.772547\n3    Lasso回归     13   4.803306\n4     弹性网络     13   4.803614\n```\n\n\n:::\n:::\n\n\n\n\n### 变量重要性可视化\n\n变量重要性可视化可以帮助我们直观地了解各个变量对模型的贡献程度：\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 向前逐步回归的变量重要性\ncoef_data <- data.frame(\n  变量 = names(coef(train_forward))[-1],\n  系数 = coef(train_forward)[-1]\n)\ncoef_data <- coef_data[order(abs(coef_data$系数), decreasing = TRUE), ]\n\nggplot(coef_data, aes(x = reorder(变量, abs(系数)), y = 系数)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  coord_flip() +\n  labs(title = \"向前逐步回归选择的变量重要性\",\n       x = \"变量\",\n       y = \"系数\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](week6_files/figure-html/unnamed-chunk-18-1.png){width=2400}\n:::\n\n```{.r .cell-code}\n# Lasso回归的变量重要性\nlasso_coef_data <- data.frame(\n  变量 = rownames(lasso_coef_matrix)[-1],\n  系数 = lasso_coef_matrix[-1, 1]\n)\nlasso_coef_data <- lasso_coef_data[order(abs(lasso_coef_data$系数), decreasing = TRUE), ]\nlasso_coef_data <- lasso_coef_data[lasso_coef_data$系数 != 0, ]  # 只保留非零系数\n\nggplot(lasso_coef_data, aes(x = reorder(变量, abs(系数)), y = 系数)) +\n  geom_bar(stat = \"identity\", fill = \"darkred\") +\n  coord_flip() +\n  labs(title = \"Lasso回归选择的变量重要性\",\n       x = \"变量\",\n       y = \"系数\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](week6_files/figure-html/unnamed-chunk-18-2.png){width=2400}\n:::\n:::\n\n\n\n\n### 变量选择标准\n\n::: {.callout-note}\n## 变量选择的标准\n\n在变量选择过程中，我们需要考虑以下几个标准：\n\n1. **解释力**：选择对因变量有显著影响的变量，以提高模型的解释力。\n2. **简洁性**：选择尽可能少的变量，以简化模型并避免过拟合。\n3. **稳定性**：选择对样本变化不敏感的变量，以提高模型的稳定性。\n4. **预测能力**：选择对新数据有良好预测能力的变量，以提高模型的泛化能力。\n\n这些标准需要在变量选择过程中进行权衡，以找到最优的变量组合。\n:::\n\n::: {.callout-tip appearance=\"simple\"}\n## AI辅助学习建议（第六周）\n\n### 回归分析理解与解释\n- **请AI解释回归系数的含义**：要求AI使用通俗易懂的语言解释回归系数的实际意义\n- **让AI比较相关分析与回归分析**：理解两者的区别和各自适用场景\n- **要求AI解释拟合优度(R²)**：深入理解R²的含义、局限性和在商业分析中的解读方式\n\n### R代码编写与模型构建\n- **请AI生成完整的回归分析流程代码**：从数据探索、模型构建到诊断和解释的全流程代码\n- **让AI帮助进行变量选择**：生成向前、向后或逐步回归代码，并解释选择逻辑\n- **要求AI编写回归结果可视化代码**：创建更专业和直观的回归结果展示图\n\n### 回归模型诊断与优化\n- **请AI检查回归模型假设**：生成检验线性性、同方差性、独立性和正态性的代码和解释\n- **让AI解释多重共线性问题**：诊断和处理多重共线性的方法\n- **要求AI优化模型预测性能**：提供提高模型预测准确性的建议\n\n### 回归分析应用场景\n- **请AI推荐适合项目主题的回归应用问题**：根据选择的项目主题获取具体的研究问题建议\n- **让AI设计商业分析方案**：设计从数据收集到分析解释的完整方案\n- **要求AI解释回归分析在不同行业的应用**：了解回归分析在市场营销、金融、人力资源等领域的典型应用案例\n:::\n\n### 参考文献与扩展阅读\n\n1. James, G., Witten, D., Hastie, T., & Tibshirani, R. (2013). An Introduction to Statistical Learning. Springer.\n2. Kutner, M. H., Nachtsheim, C. J., Neter, J., & Li, W. (2005). Applied Linear Statistical Models (5th ed.). McGraw-Hill.\n3. Fox, J. (2016). Applied Regression Analysis and Generalized Linear Models (3rd ed.). SAGE Publications.\n4. Faraway, J. J. (2014). Linear Models with R (2nd ed.). Chapman and Hall/CRC.\n5. 李惠莲. (2018). 回归分析在商业决策中的应用. 统计与决策, 34(15), 82-85. ",
    "supporting": [
      "week6_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}