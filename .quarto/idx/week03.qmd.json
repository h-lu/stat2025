{"title":"第三周：描述性统计：数据探索与可视化","markdown":{"headingText":"第三周：描述性统计：数据探索与可视化","containsRefs":false,"markdown":"\n###  用数据讲故事：描述性统计与可视化 \n\n前两周我们学习了统计学基本概念、R 语言入门、数据获取和数据导入。  从本周开始，我们将进入数据分析的核心环节：**描述性统计**。  描述性统计是数据分析的第一步，也是至关重要的一步。  通过描述性统计，我们可以**探索数据的基本特征、发现数据中的模式和规律、为后续的推断性统计分析奠定基础**。  本周我们将学习使用 `dplyr` 和 `tidyr` 包进行**数据清洗和预处理**的进阶操作，并学习使用强大的 `ggplot2` 包进行**数据可视化**，将数据转化为直观、易懂的图表，用数据讲故事！\n\n**继续使用 VS Code 或 Cursor + AI 插件：**  请继续使用 VS Code 或 Cursor 编辑器，并充分利用 AI 插件的代码辅助、智能提示、聊天问答等功能，提升学习效率。\n\n::: {.callout-note}\n## 本周学习目标\n\n*   **描述性统计核心概念:**  理解描述性统计的目的和常用方法。\n*   **`dplyr` 数据清洗进阶:**  掌握 `dplyr` 包更高级的数据清洗和预处理技巧。\n*   **`tidyr` 数据整理:**  学习使用 `tidyr` 包进行数据整理，转换数据结构。\n*   **`ggplot2` 数据可视化入门:**  掌握 `ggplot2` 包的基本语法，绘制常用统计图表 (直方图、散点图、箱线图等)。\n*   **`tidyverse` 综合应用:**  学习 `tidyverse` 生态的数据处理和可视化流程。\n*   **数据探索实践:**  使用 R 和 `tidyverse` 工具，对实际数据集进行数据探索和可视化分析。\n*   **AI 辅助数据分析:**  继续探索使用 AI 工具辅助数据清洗、预处理和可视化。\n:::\n\n---\n\n### 1. 描述性统计核心概念回顾与拓展\n\n*   **描述性统计的目的:**\n\n    *   **概括数据特征:**  用简洁的数值或图表，描述数据集的**中心趋势** (均值、中位数、众数)、**离散程度** (标准差、方差、四分位距)、**分布形状** (偏度、峰度) 等特征。\n    *   **发现数据模式:**  通过统计图表，**直观地展示数据分布、变量关系、群体差异** 等模式和规律。\n    *   **数据质量评估:**  检查数据中是否存在**异常值、缺失值、错误值** 等问题，评估数据质量。\n    *   **为推断性统计做准备:**  描述性统计的结果可以帮助我们**选择合适的推断性统计方法、提出研究假设**。\n\n*   **常用描述性统计量:**\n\n    *   **中心趋势:**\n        *   **均值 (Mean):**  所有数据的平均值，对异常值敏感。  R 函数: `mean()`\n        *   **中位数 (Median):**  将数据排序后，位于中间位置的值，对异常值不敏感。  R 函数: `median()`\n        *   **众数 (Mode):**  数据集中出现次数最多的值。  R 中没有直接计算众数的函数，可以自定义函数或使用 `table()` 和 `sort()` 函数组合计算。\n    *   **离散程度:**\n        *   **标准差 (Standard Deviation):**  度量数据分散程度的常用指标，反映数据值偏离均值的平均程度。  R 函数: `sd()`\n        *   **方差 (Variance):**  标准差的平方。  R 函数: `var()`\n        *   **四分位距 (Interquartile Range, IQR):**  第三四分位数 (Q3) 与第一四分位数 (Q1) 之差，反映中间 50% 数据的离散程度，对异常值不敏感。  R 函数: `IQR()`\n        *   **极差 (Range):**  最大值与最小值之差，对异常值非常敏感。  R 函数: `range()` (返回最小值和最大值),  `diff(range())`  计算极差。\n    *   **分布形状:**\n        *   **偏度 (Skewness):**  描述数据分布的对称性。  偏度 > 0  为右偏 (正偏)，偏度 < 0  为左偏 (负偏)，偏度 ≈ 0  为对称分布。  R 中 `e1071` 包的 `skewness()` 函数可以计算偏度。\n        *   **峰度 (Kurtosis):**  描述数据分布的尖峭程度。  峰度 > 3  为尖峰分布，峰度 < 3  为平峰分布，峰度 ≈ 3  为正态分布 (峰度为 3)。  R 中 `e1071` 包的 `kurtosis()` 函数可以计算峰度。\n\n*   **常用描述性统计图表:**\n\n    *   **直方图 (Histogram):**  展示数值型变量的**分布**情况，X 轴表示数值范围，Y 轴表示频数或频率。  `ggplot2` 函数: `geom_histogram()`\n    *   **箱线图 (Boxplot):**  展示数值型变量的**分布、中位数、四分位数、异常值** 等信息，方便比较不同组别的数据分布。  `ggplot2` 函数: `geom_boxplot()`\n    *   **散点图 (Scatter Plot):**  展示两个数值型变量之间的**关系**，X 轴和 Y 轴分别表示两个变量，每个点代表一个观测值。  `ggplot2` 函数: `geom_point()`\n    *   **条形图 (Bar Chart):**  展示**分类变量**的**频数或频率**，X 轴表示分类，Y 轴表示计数或比例。  `ggplot2` 函数: `geom_bar()` 或 `geom_col()` (当 Y 轴数据已汇总时使用 `geom_col()`)\n    *   **饼图 (Pie Chart):**  展示**分类变量**的**占比**，不推荐过度使用，条形图通常更清晰。  `ggplot2`  中绘制饼图较为复杂，可以使用其他包或方法。\n    *   **折线图 (Line Chart):**  展示**时间序列数据**的**趋势**，X 轴通常表示时间，Y 轴表示数值。  `ggplot2` 函数: `geom_line()`\n\n*   **选择合适的描述性统计方法:**  根据**变量类型**和**分析目的**选择合适的描述性统计方法。\n\n    *   **数值型变量:**  常用均值、中位数、标准差、方差、四分位距、直方图、箱线图、散点图等。\n    *   **分类变量:**  常用频数、频率、百分比、条形图、饼图等。\n    *   **探索变量关系:**  常用散点图、相关系数 (数值型变量之间),  分组箱线图/条形图 (分类变量与数值型变量之间),  交叉表 (分类变量之间)。\n    *   **数据质量评估:**  常用缺失值统计、异常值检测 (箱线图、散点图)、描述性统计量 (检查数据范围和分布是否合理)。\n\n### 2. `dplyr` 数据清洗和预处理进阶\n\n*   **回顾 `dplyr` 基础:**  回顾上周学习的 `dplyr`  基础 \"动词\"： `filter()`, `select()`, `mutate()`, `arrange()`, `summarize()`, `group_by()`, `%>%` 管道操作符。\n\n*   **`dplyr`  数据清洗常用技巧:**\n\n    *   **处理缺失值:**\n        *   **`filter(!is.na(列名))`:**  删除包含缺失值的行。  `!is.na()`  返回逻辑值，`TRUE`  表示非缺失值，`FALSE`  表示缺失值，`!`  表示取反。\n        *   **`mutate(新列名 = ifelse(is.na(列名), 替换值, 列名))`:**  用指定值 (例如，均值、中位数、0、特定值) 替换缺失值。  `ifelse()`  函数是条件赋值函数，`ifelse(条件, 真值, 假值)`。\n        *   **`tidyr::replace_na(list(列名 = 替换值))`:**  使用 `tidyr` 包的 `replace_na()` 函数替换缺失值，语法更简洁。\n    *   **处理重复值:**\n        *   **`distinct()`:**  删除完全重复的行。\n        *   **`distinct(列名1, 列名2, ...)`:**  根据指定的列组合删除重复行，保留第一次出现的行。\n        *   **`duplicated()`:**  检测重复值，返回逻辑向量，`TRUE`  表示重复值，`FALSE`  表示非重复值。  常与 `filter()`  函数结合使用，筛选或删除重复值。\n    *   **处理异常值:**\n        *   **箱线图可视化:**  使用箱线图识别可能的异常值 (超出箱线图 \"须\" 的点)。\n        *   **基于标准差的方法:**  例如，将超出均值 ± 3 倍标准差范围的值视为异常值。\n        *   **基于 IQR 的方法:**  例如，将小于 Q1 - 1.5 * IQR 或大于 Q3 + 1.5 * IQR 的值视为异常值 (箱线图的 \"须\" 的计算方法)。\n        *   **根据业务知识判断:**  结合实际业务背景和数据含义，判断哪些值是合理的，哪些值可能是异常的。\n        *   **处理异常值的方法:**  删除异常值、替换为缺失值、替换为合理值 (例如，均值、 Winsorize 处理)、保留异常值 (如果异常值本身包含重要信息)。\n    *   **数据类型转换:**\n        *   **`mutate(列名 = as.类型(列名))`:**  使用 `as.类型()` 函数转换列的数据类型。  例如，`as.character()`, `as.numeric()`, `as.integer()`, `as.logical()`, `as.factor()`, `as.Date()`, `as.POSIXct()` 等。\n        *   **`readr::parse_类型(列名)`:**  使用 `readr` 包的 `parse_类型()` 函数进行类型转换，更严格和规范。  例如，`parse_character()`, `parse_double()`, `parse_integer()`, `parse_logical()`, `parse_factor()`, `parse_date()`, `parse_datetime()`, `parse_time()`, `parse_number()`, `parse_currency()`。\n        *   **字符数据处理:**\n            *   **`stringr` 包:**  `tidyverse`  的 `stringr` 包专门用于字符数据处理，提供了丰富的字符串操作函数，例如，字符串拼接、分割、提取、替换、大小写转换、去除空格、模式匹配 (正则表达式) 等。  常用的 `stringr` 函数包括： `str_c()`, `str_split()`, `str_sub()`, `str_replace()`, `str_to_lower()`, `str_to_upper()`, `str_trim()`, `str_detect()`, `str_extract()`, `str_match()` 等。\n            *   **示例:**\n                ```r\n                library(dplyr)\n                library(stringr)\n\n                data <- tibble(\n                  name = c(\"  John Doe  \", \"Jane Smith\", \"Peter-Pan \", \"Alice_Wonderland\"),\n                  city_state = c(\"New York, NY\", \"Los Angeles, CA\", \"London, UK\", \"Paris, FR\")\n                )\n\n                cleaned_data <- data %>%\n                  mutate(\n                    name_trimmed = str_trim(name),  # 去除姓名两端空格\n                    name_upper = str_to_upper(name_trimmed),  # 姓名转换为大写\n                    first_name = str_split_fixed(name_trimmed, \" \", n = 2)[, 1],  # 提取 first name\n                    last_name = str_split_fixed(name_trimmed, \" \", n = 2)[, 2],  # 提取 last name\n                    city = str_split_fixed(city_state, \", \", n = 2)[, 1],  # 提取城市\n                    state_country = str_split_fixed(city_state, \", \", n = 2)[, 2]  # 提取州/国家\n                  ) %>%\n                  select(-name, -city_state)  # 删除原始列\n\n                print(cleaned_data)\n                ```\n\n*   **`dplyr`  进阶操作:**\n\n    *   **条件型数据转换 (`case_when()`):**  `case_when()`  函数可以根据多个条件进行赋值，类似于 `if-else if-else`  结构，但语法更简洁，可读性更高。\n        ```r\n        data_with_category <- data %>%\n          mutate(\n            category = case_when(\n              value < 10 ~ \"Low\",\n              value >= 10 & value < 50 ~ \"Medium\",\n              value >= 50 ~ \"High\",\n              TRUE ~ \"Unknown\"  # 默认情况，类似于 else\n            )\n          )\n        ```\n    *   **窗口函数 (`window functions`):**  窗口函数可以在分组数据上进行计算，例如，计算每个分组内的排名、累计值、移动平均值等。  `dplyr`  提供了 `row_number()`, `rank()`, `dense_rank()`, `percent_rank()`, `lead()`, `lag()`, `cumsum()`, `cummean()`, `cummax()`, `cummin()`  等窗口函数。  窗口函数通常与 `group_by()`  和 `mutate()`  函数结合使用。\n        ```r\n        data_with_rank <- data %>%\n          group_by(group_col) %>%\n          mutate(\n            rank_within_group = rank(value),  # 计算组内排名\n            cumulative_sum = cumsum(value)  # 计算组内累计和\n          ) %>%\n          ungroup()  # 取消分组，后续操作不再分组\n        ```\n\n*   **`dplyr`  数据清洗练习:**  使用 `flights`  数据集或其他数据集，练习使用 `dplyr`  进行数据清洗和预处理，例如：\n    *   处理 `flights`  数据集中的缺失值 (例如，`dep_delay`, `arr_delay`, `air_time`  等列可能存在缺失值)。\n    *   检测和处理 `flights`  数据集中的异常值 (例如，`dep_delay`, `arr_delay`, `distance`  等列可能存在异常值)。\n    *   将 `flights`  数据集中的航空公司代码 `carrier`  转换为航空公司名称 (可以使用 `航空公司代码-名称`  对照表，进行 join 操作，下周学习 join)。\n    *   使用 `stringr`  包处理 `flights`  数据集中的字符型数据 (如果存在)。\n    *   使用 `case_when()`  函数创建新的分类变量 (例如，根据 `dep_delay`  将航班分为 \"准点\", \"轻微延误\", \"严重延误\" 等类别)。\n    *   使用窗口函数计算每个航空公司的航班数量排名、平均延误时间排名等。\n\n### 3. `tidyr` 数据整理：数据变形\n\n*   **`tidyr` 包的目的:**  `tidyr` 包是 `tidyverse`  生态中专门用于**数据整理 (data tidying)** 的包。  数据整理的目标是将数据转换为**整洁数据 (tidy data)** 格式，方便后续的数据分析和可视化。  **整洁数据** 的核心原则是：\n\n    *   **每个变量占一列 (Each variable forms a column).**\n    *   **每个观测值占一行 (Each observation forms a row).**\n    *   **每个值自成一个单元格 (Each value forms a cell).**\n\n*   **`tidyr`  数据变形常用函数:**\n\n    *   **`pivot_longer()` (长数据透视):**  将**宽格式 (wide format)** 数据转换为**长格式 (long format)** 数据。  宽格式数据中，一个观测值的多个变量可能分布在多列中，长格式数据则将这些变量 \"堆叠\" 成一列，并使用另一列标识变量名。  `pivot_longer()`  函数可以将指定的**多列** \"透视\" 成**两列**：**变量名列 (name column)** 和 **值列 (value column)**。\n        ```r\n        # 宽格式数据示例\n        wide_data <- tibble(\n          id = 1:3,\n          var1_2020 = c(10, 12, 15),\n          var2_2020 = c(20, 25, 30),\n          var1_2021 = c(11, 13, 16),\n          var2_2021 = c(22, 27, 33)\n        )\n\n        # 使用 pivot_longer() 转换为长格式\n        long_data <- wide_data %>%\n          pivot_longer(\n            cols = starts_with(\"var\"),  # 指定要透视的列，使用 starts_with() 选择以 \"var\" 开头的列\n            names_to = c(\"variable\", \"year\"),  # 指定变量名列和年份列的名称\n            names_sep = \"_\",  # 指定列名分隔符 \"_\"\n            values_to = \"value\"  # 指定值列的名称\n          )\n\n        print(long_data)\n        ```\n        *   **`cols` 参数:**  指定要透视的列。  可以使用列名向量、列索引向量、列名选择函数 (例如 `starts_with()`, `ends_with()`, `contains()`, `matches()`, `num_range()`, `everything()`, `last_col()`) 等。\n        *   **`names_to` 参数:**  指定透视后的变量名列的名称。  可以传入一个字符向量，指定变量名列的名称，如果 `names_sep` 或 `names_pattern` 参数被使用，则 `names_to`  可以传入多个名称，表示将列名拆分成多列。\n        *   **`names_sep` 参数:**  指定列名分隔符。  如果列名包含多个信息，可以使用分隔符将列名拆分成多列。\n        *   **`names_pattern` 参数:**  使用正则表达式匹配列名，并将匹配到的部分拆分成多列。  `names_sep` 和 `names_pattern`  只能使用一个。\n        *   **`values_to` 参数:**  指定透视后的值列的名称。\n\n    *   **`pivot_wider()` (宽数据透视):**  将**长格式 (long format)** 数据转换为**宽格式 (wide format)** 数据。  `pivot_wider()`  是 `pivot_longer()`  的逆操作。  `pivot_wider()`  函数需要指定**哪一列作为新的列名 (names_from)**，**哪一列作为新的值 (values_from)**。\n        ```r\n        # 长格式数据示例 (上例中的 long_data)\n        long_data <- tibble(\n          id = rep(1:3, each = 4),\n          variable = rep(c(\"var1\", \"var2\"), each = 2, times = 3),\n          year = rep(rep(c(\"2020\", \"2021\"), each = 1), times = 6),\n          value = c(10, 20, 12, 25, 15, 30, 11, 22, 13, 27, 16, 33)\n        )\n\n        # 使用 pivot_wider() 转换为宽格式\n        wide_data_reconstructed <- long_data %>%\n          pivot_wider(\n            names_from = c(\"variable\", \"year\"),  # 指定列名来源列，这里使用 variable 和 year 两列组合作为新列名\n            values_from = \"value\"  # 指定值来源列\n          )\n\n        print(wide_data_reconstructed)\n        ```\n        *   **`names_from` 参数:**  指定列名来源列。  可以使用列名向量，指定一列或多列作为新列名的来源。  如果指定多列，则新列名将由这些列的值组合而成。\n        *   **`values_from` 参数:**  指定值来源列。  可以使用列名向量，指定一列或多列作为新值的来源。  如果 `names_from`  指定了多列，`values_from`  也应该指定相同数量的列，或者只指定一列，表示所有新列的值都来自同一列。\n\n    *   **`separate()` (列分割):**  将**一列**按照指定的分隔符分割成**多列**。  `separate()`  函数类似于 `stringr::str_split_fixed()`  函数，但 `separate()`  直接操作数据框列，更方便。\n        ```r\n        data_with_combined_col <- tibble(\n          combined_col = c(\"A-1\", \"B-2\", \"C-3\")\n        )\n\n        separated_data <- data_with_combined_col %>%\n          separate(\n            col = combined_col,  # 指定要分割的列\n            into = c(\"col1\", \"col2\"),  # 指定分割后的新列名\n            sep = \"-\"  # 指定分隔符 \"-\"\n          )\n\n        print(separated_data)\n        ```\n        *   **`col` 参数:**  指定要分割的列名。\n        *   **`into` 参数:**  指定分割后的新列名。  传入一个字符向量，指定新列的名称。\n        *   **`sep` 参数:**  指定分隔符。  可以使用字符或正则表达式作为分隔符。\n\n    *   **`unite()` (列合并):**  将**多列**合并成**一列**，并使用指定的分隔符连接。  `unite()`  是 `separate()`  的逆操作。\n        ```r\n        separated_data <- tibble(\n          col1 = c(\"A\", \"B\", \"C\"),\n          col2 = c(\"1\", \"2\", \"3\")\n        )\n\n        united_data <- separated_data %>%\n          unite(\n            col = combined_col,  # 指定合并后的新列名\n            col1, col2,  # 指定要合并的列\n            sep = \"-\"  # 指定分隔符 \"-\"\n          )\n\n        print(united_data)\n        ```\n        *   **`col` 参数:**  指定合并后的新列名。\n        *   **`...` 参数:**  使用 `...`  传入要合并的列名，可以传入多个列名。\n        *   **`sep` 参数:**  指定分隔符。\n\n*   **`tidyr`  数据整理练习:**  使用 `flights`  数据集或其他数据集，练习使用 `tidyr`  进行数据整理，例如：\n    *   将 `flights`  数据集转换为长格式，例如，将 `dep_delay` 和 `arr_delay`  两列透视为一列 `delay_type` (取值为 \"dep_delay\" 或 \"arr_delay\") 和一列 `delay_time` (延误时间)。\n    *   将宽格式的数据 (例如，包含多年份数据的表格) 转换为长格式，方便进行时间序列分析或面板数据分析。\n    *   分割包含复合信息的列，例如，将日期时间列分割成日期列和时间列，将地址列分割成城市列、州列、国家列等。\n    *   合并多列信息，例如，将年、月、日列合并成日期列，将姓、名列合并成姓名列。\n\n### 4. `ggplot2` 数据可视化初步：常用图表\n\n*   **`ggplot2` 包简介:**  `ggplot2` 包是 R 语言中最强大、最灵活、最流行的**数据可视化**包，也是 `tidyverse`  生态的核心包之一。  `ggplot2`  基于**图层语法 (grammar of graphics)**，将数据可视化分解为多个独立的图层，用户可以灵活组合这些图层，创建各种复杂的统计图表。  `ggplot2`  的特点包括：\n\n    *   **图层语法:**  基于图层语法，灵活、强大、可扩展。\n    *   **美观的默认样式:**  默认生成的图表美观、专业。\n    *   **高度定制化:**  可以高度定制图表的各个方面，例如，颜色、形状、大小、标签、标题、主题等。\n    *   **与 `tidyverse`  完美集成:**  与 `dplyr`, `tidyr`  等 `tidyverse`  包无缝衔接，数据处理和可视化流程流畅。\n\n*   **`ggplot2`  基本语法:**  `ggplot2`  绘图的基本流程是：\n\n    1.  **创建 `ggplot` 对象:**  使用 `ggplot()` 函数创建 `ggplot` 对象，并指定**数据 (data)** 和**映射 (mapping, `aes()`)**。  `data` 参数指定要使用的数据框，`mapping` 参数使用 `aes()` 函数指定**变量**如何**映射**到**图形属性 (aesthetics)**，例如，X 轴、Y 轴、颜色、形状、大小、填充等。\n    2.  **添加几何对象 (geometric objects, `geom_xxx()`):**  使用各种 `geom_xxx()` 函数添加**几何对象**图层，例如，`geom_point()` (散点图), `geom_line()` (折线图), `geom_bar()` (条形图), `geom_histogram()` (直方图), `geom_boxplot()` (箱线图) 等。  每个 `geom_xxx()` 函数都对应一种图表类型。  几何对象图层决定了图表的**类型**和**基本形状**。\n    3.  **添加统计变换 (statistical transformations, `stat_xxx()`):**  某些几何对象需要进行**统计变换**，例如，直方图需要计算频数，条形图需要计算汇总统计量。  `ggplot2`  会自动进行默认的统计变换，用户也可以使用 `stat_xxx()` 函数手动指定统计变换。  通常情况下，无需手动添加统计变换图层。\n    4.  **添加标度 (scales, `scale_xxx_yyy()`):**  标度控制**数据值**到**图形属性**的**映射方式**，例如，X 轴和 Y 轴的刻度范围、颜色标度、形状标度、大小标度等。  `ggplot2`  会自动使用默认标度，用户可以使用 `scale_xxx_yyy()` 函数自定义标度，例如，`scale_x_continuous()`, `scale_y_continuous()`, `scale_color_manual()`, `scale_shape_manual()`, `scale_size_continuous()` 等。\n    5.  **添加坐标系 (coordinate systems, `coord_xxx()`):**  坐标系控制图表的**坐标轴类型**和**方向**，例如，笛卡尔坐标系 (默认), 极坐标系, 地理坐标系等。  `ggplot2`  默认使用笛卡尔坐标系，用户可以使用 `coord_xxx()` 函数自定义坐标系，例如，`coord_cartesian()`, `coord_polar()`, `coord_map()` 等。\n    6.  **添加分面 (faceting, `facet_xxx()`):**  分面可以将图表**分割成多个子图**，按照一个或多个分类变量进行分组，方便比较不同组别的数据。  `ggplot2`  提供了 `facet_wrap()` (单变量分面) 和 `facet_grid()` (双变量分面) 函数。\n    7.  **添加主题 (themes, `theme()`):**  主题控制图表的**整体外观样式**，例如，背景颜色、网格线、字体、标题位置、图例样式等。  `ggplot2`  提供了多种内置主题 (例如 `theme_bw()`, `theme_minimal()`, `theme_classic()`)，用户也可以使用 `theme()` 函数自定义主题。\n    8.  **添加标签、标题等 (labels, titles, etc., `labs()`, `ggtitle()`, `xlab()`, `ylab()`, `caption()`):**  使用 `labs()` 函数添加**标签** (例如，X 轴标签、Y 轴标签、颜色图例标签、形状图例标签等),  使用 `ggtitle()` 函数添加**主标题**,  使用 `xlab()` 和 `ylab()` 函数分别添加 X 轴和 Y 轴标签,  使用 `caption()` 函数添加**图表脚注**。\n\n*   **常用 `ggplot2`  图表类型示例 (使用 `flights`  数据集):**\n\n    *   **直方图 (Histogram):**  展示 `dep_delay`  出发延误时间的分布。\n        ```r\n        library(ggplot2)\n\n        ggplot(flights, aes(x = dep_delay)) +\n          geom_histogram(binwidth = 15)  # binwidth 参数指定组距\n        ```\n        *   `ggplot(flights, aes(x = dep_delay))`:  创建 `ggplot` 对象，指定数据为 `flights` 数据框，X 轴映射为 `dep_delay` 变量。\n        *   `geom_histogram(binwidth = 15)`:  添加直方图几何对象图层，`binwidth = 15`  指定组距为 15 分钟。\n\n    *   **散点图 (Scatter Plot):**  展示 `dep_delay`  出发延误时间与 `arr_delay`  到达延误时间的关系。\n        ```r\n        ggplot(flights, aes(x = dep_delay, y = arr_delay)) +\n          geom_point()\n        ```\n        *   `ggplot(flights, aes(x = dep_delay, y = arr_delay))`:  创建 `ggplot` 对象，指定 X 轴映射为 `dep_delay`，Y 轴映射为 `arr_delay`。\n        *   `geom_point()`:  添加散点图几何对象图层。\n\n    *   **箱线图 (Boxplot):**  比较不同航空公司 `carrier`  的 `arr_delay`  到达延误时间分布。\n        ```r\n        ggplot(flights, aes(x = carrier, y = arr_delay)) +\n          geom_boxplot()\n        ```\n        *   `ggplot(flights, aes(x = carrier, y = arr_delay))`:  创建 `ggplot` 对象，指定 X 轴映射为 `carrier` (分类变量), Y 轴映射为 `arr_delay` (数值型变量)。\n        *   `geom_boxplot()`:  添加箱线图几何对象图层。\n\n    *   **条形图 (Bar Chart):**  展示不同航空公司 `carrier`  的航班数量。\n        ```r\n        ggplot(flights, aes(x = carrier)) +\n          geom_bar()\n        ```\n        *   `ggplot(flights, aes(x = carrier))`:  创建 `ggplot` 对象，只指定 X 轴映射为 `carrier`。  `geom_bar()`  默认统计每个分类的频数。\n        *   `geom_bar()`:  添加条形图几何对象图层。\n\n    *   **添加颜色、形状、大小等图形属性:**  可以使用 `aes()` 函数在 `geom_xxx()` 函数内部或 `ggplot()` 函数内部指定额外的图形属性映射，例如，使用 `color` 映射颜色,  `shape` 映射形状,  `size` 映射大小,  `fill` 映射填充颜色等。\n        ```r\n        # 散点图，使用 color 映射航空公司 carrier\n        ggplot(flights, aes(x = dep_delay, y = arr_delay, color = carrier)) +\n          geom_point()\n\n        # 散点图，使用 size 映射飞行距离 distance\n        ggplot(flights, aes(x = dep_delay, y = arr_delay, size = distance)) +\n          geom_point()\n        ```\n\n    *   **添加标题、标签、主题:**\n        ```r\n        ggplot(flights, aes(x = dep_delay, y = arr_delay, color = carrier)) +\n          geom_point() +\n          labs(title = \"出发延误 vs 到达延误\",  # 主标题\n               subtitle = \"按航空公司着色\",  # 副标题\n               x = \"出发延误时间 (分钟)\",  # X 轴标签\n               y = \"到达延误时间 (分钟)\",  # Y 轴标签\n               color = \"航空公司\",  # 颜色图例标签\n               caption = \"数据来源：nycflights13 包\") +  # 图表脚注\n          theme_bw()  # 使用黑白主题\n        ```\n\n*   **`ggplot2`  可视化练习:**  使用 `flights`  数据集或其他数据集，练习使用 `ggplot2`  绘制各种常用统计图表，并尝试自定义图表的各个方面，例如：\n    *   绘制 `flights`  数据集 `distance`  飞行距离的直方图，并尝试调整 `binwidth`  参数。\n    *   绘制 `flights`  数据集 `air_time`  飞行时间的箱线图，按照出发机场 `origin`  分组。\n    *   绘制 `flights`  数据集 `dep_delay`  与 `arr_delay`  的散点图，并使用颜色或形状映射航空公司 `carrier`。\n    *   绘制 `flights`  数据集航空公司 `carrier`  的条形图，并添加航班数量标签。\n    *   尝试修改图表的标题、标签、颜色、主题等，使图表更美观、更易读。\n\n### 5. `tidyverse` 生态综合应用：数据处理与可视化流程\n\n*   **`tidyverse`  数据分析流程:**  `tidyverse`  生态提供了一套完整的数据分析流程，包括：\n\n    1.  **数据导入 (`readr`, `datatable`):**  使用 `readr` 或 `datatable` 包读取各种数据格式的文件。\n    2.  **数据整理 (`tidyr`):**  使用 `tidyr` 包将数据转换为整洁数据格式。\n    3.  **数据清洗和预处理 (`dplyr`, `stringr`):**  使用 `dplyr` 和 `stringr` 包进行数据清洗、缺失值处理、异常值处理、数据类型转换、字符数据处理等。\n    4.  **数据探索和描述性统计 (`dplyr`):**  使用 `dplyr` 包进行数据汇总、分组统计、计算描述性统计量。\n    5.  **数据可视化 (`ggplot2`):**  使用 `ggplot2` 包绘制各种统计图表，探索数据模式、展示分析结果。\n    6.  **数据建模和推断性统计 (后续课程):**  使用 R 的统计建模和推断性统计功能进行更深入的数据分析 (本周不涉及)。\n    7.  **结果沟通和报告 (后续课程):**  将数据分析结果整理成报告、幻灯片、交互式应用等形式，进行有效沟通 (本周不涉及)。\n\n*   **`tidyverse`  流程示例 (使用 `flights`  数据集):**  以分析不同航空公司的平均延误时间为例，演示 `tidyverse`  数据处理和可视化流程。\n\n    ```r\n    library(tidyverse)\n    library(nycflights13)\n\n    # 1. 数据导入 (flights 数据集已加载到 nycflights13 包中，无需额外导入)\n\n    # 2. 数据整理 (flights 数据集已经是整洁数据格式，无需整理)\n\n    # 3. 数据清洗和预处理 (简单处理缺失值，移除到达延误时间为缺失值的航班)\n    flights_cleaned <- flights %>%\n      filter(!is.na(arr_delay))\n\n    # 4. 数据探索和描述性统计 (按照航空公司分组，计算平均到达延误时间)\n    carrier_delay_summary <- flights_cleaned %>%\n      group_by(carrier) %>%\n      summarize(mean_delay = mean(arr_delay)) %>%\n      arrange(desc(mean_delay))  # 按照平均延误时间降序排序\n\n    print(carrier_delay_summary)\n\n    # 5. 数据可视化 (绘制条形图，展示不同航空公司的平均到达延误时间)\n    ggplot(carrier_delay_summary, aes(x = carrier, y = mean_delay)) +\n      geom_col(fill = \"steelblue\") +  # 柱形图，填充颜色为 steelblue\n      geom_text(aes(label = round(mean_delay, 1)),  # 添加文本标签，显示平均延误时间，保留一位小数\n                vjust = -0.5) +  # 标签垂直位置微调\n      labs(title = \"不同航空公司平均到达延误时间\",\n           x = \"航空公司代码\",\n           y = \"平均到达延误时间 (分钟)\") +\n      theme_minimal()  # 使用 minimal 主题\n    ```\n\n*   **`tidyverse`  综合练习:**  选择一个实际数据集 (例如，`flights`  数据集、项目一的数据集或其他公开数据集)，使用 `tidyverse`  生态的 `readr`, `tidyr`, `dplyr`, `stringr`, `ggplot2`  包，完成一个完整的数据分析和可视化项目，包括数据导入、数据整理、数据清洗、数据预处理、描述性统计分析、数据可视化、结果解释和报告撰写 (报告撰写为可选，重点练习数据处理和可视化)。\n\n### 6. 本周内容总结与下周预告\n\n*   **本周回顾:**  回顾本周学习内容，巩固重点知识。  本周我们**深入学习**了描述性统计的核心概念，`dplyr`  数据清洗和预处理进阶技巧，`tidyr`  数据整理方法，`ggplot2`  数据可视化初步，以及 `tidyverse`  生态的综合应用。  **描述性统计、数据清洗、数据整理和数据可视化是数据分析的关键技能，务必熟练掌握本周所学内容。**\n\n*   **下周预告:**  下周我们将继续深入学习 `ggplot2` 包，学习更高级的数据可视化技巧，例如，多图层组合、图形精细调整、交互式图表制作等。  我们将探索更多 `ggplot2`  的几何对象、统计变换、标度、坐标系、分面、主题等，打造更专业、更精美、更具洞察力的数据可视化作品。\n\n### 7. 课后任务\n\n*   **小组任务:**\n    *   **项目一数据清洗和预处理:**  各小组根据本周学习的数据清洗和预处理方法，使用 `dplyr` 和 `tidyr` 包对项目一的数据集进行数据清洗和预处理。  完成缺失值处理、异常值处理、数据类型转换、数据整理等任务，确保数据质量和整洁性，为后续的数据分析和可视化做好准备。\n    *   **项目一数据可视化方案:**  小组讨论项目一的数据可视化方案，确定要展示的数据特征和模式，选择合适的图表类型，设计图表布局和样式。\n\n*   **个人任务:**\n    *   **复习本周内容:**  回顾本周讲义和课堂笔记，巩固描述性统计概念、`dplyr`  数据清洗技巧、`tidyr`  数据整理方法、`ggplot2`  可视化语法和常用图表类型。\n    *   **R 代码练习:**  完成本讲义中布置的 R 代码练习，熟练掌握 `dplyr`, `tidyr`, `stringr`, `ggplot2`  包的常用函数。  尝试使用 AI 插件辅助 R 代码练习。\n    *   **数据集可视化探索:**  选择 `flights`  数据集或项目一的数据集，使用 `ggplot2`  包进行数据可视化探索，尝试绘制各种图表，并自定义图表样式，深入理解数据特征和模式。  可以尝试完成讲义中提供的练习题，也可以自己设计可视化探索任务。\n\n::: {.callout-tip}\n## AI 辅助学习小贴士\n\n*   **R 代码练习:**  继续在 VS Code 或 Cursor 中练习 R 语言代码，充分利用 AI 插件的代码自动补全、代码生成、代码解释、AI 聊天等功能。  遇到 R 代码问题，及时向 AI 提问。\n*   **数据包使用问题:**  如果在使用 `dplyr`, `tidyr`, `stringr`, `ggplot2`  等数据包时遇到问题，可以查阅包的官方文档，或者使用 AI 聊天提问，寻求帮助。\n    *   **`dplyr`  数据清洗技巧:**  例如，如何使用 `filter()`  筛选满足多个条件的行？  如何使用 `mutate()`  创建多个新列？  如何使用 `group_by()`  和 `summarize()`  进行分组汇总统计？\n    *   **`tidyr`  数据整理方法:**  例如，`pivot_longer()`  和 `pivot_wider()`  函数的参数如何设置？  `separate()`  和 `unite()`  函数如何使用？  如何将复杂格式的数据转换为整洁数据？\n    *   **`ggplot2`  可视化语法:**  例如，`ggplot()`  和 `aes()`  函数如何使用？  各种 `geom_xxx()`  函数的作用是什么？  如何添加标题、标签、主题？  如何自定义图表样式？\n*   **统计图表选择:**  如果不确定使用哪种图表类型来展示数据，可以通过AI聊天工具寻求建议。例如，可以提问：\"哪种图表适合比较多个组的分布情况？\" 或 \"如何可视化两个数值变量之间的关系？\"。AI不仅会推荐合适的图表类型，还会提供相应的`ggplot2`代码示例。\n*   **可视化代码生成:**  使用 AI 代码生成功能，输入注释，例如：  `# 使用 ggplot2 创建价格的直方图`,  `# 使用 ggplot2 创建 'x' 和 'y' 的散点图，并按 'category' 着色`,  让 AI 生成可视化代码。\n*   **代码解释和优化:**  使用 AI 代码解释功能，选中 `tidyverse`  代码片段，让 AI 解释代码的功能和每一行代码的作用。  如果代码运行效率较低，可以使用 AI 聊天咨询代码优化技巧。\n:::\n\n::: {.callout-note}\n## 学习寄语\n\n**图表胜千言！  本周我们学习了描述性统计和数据可视化的核心技能，掌握了用数据讲故事的能力。  精美、清晰、有洞察力的图表是数据分析的灵魂！**  继续保持学习的热情，充分利用 VS Code/Cursor 和 AI 插件的强大功能，相信大家会在统计学和 R 语言的学习中取得更大的进步！  下周见！\n::: ","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","number-sections":false,"toc":true,"toc-depth":3,"output-file":"week03.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":"cosmo"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}