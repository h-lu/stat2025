---
title: "第一周实验：R 环境与基础操作"
execute:
  echo: true
  message: false
  warning: false
  error: false
  cache: false
---

## 1. 目标

本实验旨在帮助你熟悉 R 和 RStudio 环境，练习基本的 R 语法，并为后续的数据分析打下基础。

-   熟悉 RStudio 界面。
-   练习使用 R 作为计算器。
-   掌握变量赋值。
-   理解并创建不同类型的向量。
-   安装并加载 `tidyverse` 包。
-   (可选) 尝试使用 AI 助手查询简单问题。

## 2. RStudio 环境熟悉

打开 RStudio，花几分钟熟悉以下几个主要窗口：

1.  **脚本编辑器 (Script Editor / Source Pane):** 左上角。用于编写和保存 R 代码脚本 (.R 文件) 或 Quarto/R Markdown 文档 (.qmd / .Rmd)。
2.  **控制台 (Console):** 左下角。用于直接输入和执行 R 命令，查看输出结果和错误信息。`>` 符号是命令提示符。
3.  **环境/历史记录 (Environment/History):** 右上角。
    -   `Environment`: 显示当前工作空间中已创建的对象（变量、数据框、函数等）。
    -   `History`: 显示你之前在控制台中执行过的命令。
4.  **文件/图形/包/帮助 (Files/Plots/Packages/Help/Viewer):** 右下角。
    -   `Files`: 浏览你的计算机文件系统。
    -   `Plots`: 显示生成的图形。
    -   `Packages`: 查看已安装的 R 包，加载或卸载包，安装新包。
    -   `Help`: 查看 R 函数或数据集的帮助文档。
    -   `Viewer`: 显示本地网页内容（例如 `shiny` 应用或 `htmlwidgets`）。

**尝试:** 

* 在**控制台**中输入 `1 + 1` 并按 Enter。
* 在**脚本编辑器**中输入 `x <- 5`，然后选中这行代码，点击 "Run" 按钮（或使用快捷键 Cmd/Ctrl + Enter）。观察**环境**窗口中是否出现了变量 `x`。
* 在**控制台**中输入 `?mean` 查看 `mean` 函数的帮助文档，观察**帮助**窗口的变化。

## 3. R 作为计算器

在控制台中尝试执行以下计算：

```r
# 加法
5 + 12

# 减法
100 - 45

# 乘法
6 * 7

# 除法
50 / 4

# 幂运算 (2 的 5 次方)
2 ^ 5

# 模运算 (取余数)
17 %% 5

# 整数除法
17 %/% 5

# 复杂表达式 (注意运算优先级)
(5 + 3) * 2 / 4 - 1
```

## 4. 变量赋值与基本类型

-   使用 `<-` 将计算结果赋值给变量。
-   变量名可以包含字母、数字、点 (`.`) 和下划线 (`_`)，但必须以字母或点开头（如果以点开头，后面不能是数字）。区分大小写。

```r
# 将 10 赋值给变量 a
a <- 10

# 将 "Hello" 赋值给变量 message
message <- "Hello, R learners!"

# 创建一个逻辑变量
is_learning <- TRUE

# 查看变量的值
a
message
is_learning

# 对变量进行运算
b <- a * 3
b

# 查看变量的数据类型
class(a)
class(message)
class(is_learning)
```

**练习:** 

1. 创建一个变量 `my_age` 并存储你的年龄。
2. 创建一个变量 `course_name` 并存储课程名称 "STAT & R"。
3. 计算 `my_age` 的 5 年后年龄，并将结果存储在 `age_in_5_years` 中。
4. 查看 `age_in_5_years` 的值和类型。

## 5. 向量 (Vectors)

向量是 R 中最基本的数据结构，用于存储**相同类型**的元素序列。使用 `c()` 函数创建。

```r
# 数值向量
numeric_vec <- c(10.5, 5.2, 8.0, 1.5)
numeric_vec
class(numeric_vec)
length(numeric_vec) # 查看向量长度

# 整数向量 (可以在数字后加 L)
integer_vec <- c(1L, 5L, 10L, -2L)
integer_vec
class(integer_vec)

# 字符向量
char_vec <- c("apple", "banana", "cherry", "date")
char_vec
class(char_vec)

# 逻辑向量
logical_vec <- c(TRUE, FALSE, FALSE, TRUE, TRUE)
logical_vec
class(logical_vec)

# 访问向量元素 (索引从 1 开始)
char_vec[1]       # 第一个元素
numeric_vec[3]    # 第三个元素
numeric_vec[c(1, 4)] # 第一个和第四个元素
numeric_vec[2:4]    # 第二个到第四个元素

# 向量运算 (通常是元素级别的)
vec1 <- c(1, 2, 3)
vec2 <- c(4, 5, 6)
vec1 + vec2
vec1 * 2
vec1 > 1

# 向量类型强制转换
mixed_vec <- c(1, "two", TRUE)
mixed_vec # 所有元素都变成了字符型
class(mixed_vec)
```

**练习:** 

1. 创建包含你最喜欢的 3 部电影名称的字符向量 `favorite_movies`。
2. 创建包含这 3 部电影大致评分（1-10）的数值向量 `movie_ratings`。
3. 访问 `favorite_movies` 中的第二部电影名称。
4. 访问 `movie_ratings` 中评分大于 8 的所有评分。 (提示: 可以使用逻辑索引 `movie_ratings[movie_ratings > 8]`)


## 6. 安装与加载 `tidyverse`

`tidyverse` 是我们进行数据科学工作流的核心工具集。

```r
# 1. 安装 tidyverse (如果尚未安装)
# 你只需要在你的 R 环境中执行一次这个命令。
# 如果不确定是否安装过，可以先尝试加载，如果报错再安装。
# install.packages("tidyverse")

# 2. 加载 tidyverse
# 每次启动新的 R 会话 (Session) 时，如果需要使用 tidyverse 中的函数，
# 都需要先加载它。
library(tidyverse)

# 加载成功后，会显示 tidyverse 包含的核心包及其版本信息。
```

**检查:** 加载 `tidyverse` 后，在控制台中输入 `dplyr::` 并按 Tab 键，是否能看到 `dplyr` 包中的函数列表（如 `filter`, `mutate` 等）？

## 7. (可选) 尝试 AI 助手

打开你选择的 AI 助手（如 ChatGPT 网页版，或 VS Code 中的 Copilot Chat）。

**尝试提问:** 

* "如何在 R 中创建从 1 到 10 的数字序列？" (提示: 答案可能是 `1:10` 或 `seq(1, 10)`)
* "R 中的 `length()` 函数有什么作用？"
* "请举例说明如何在 R 中将计算结果赋值给变量。"

**思考:** 

* AI 的回答是否准确？ 
* AI 的解释是否清晰？ 
* 与你自己查找帮助文档 (`?length`) 或讲义相比，AI 辅助的优缺点是什么？

## 8. 实验总结

在本实验中，我们熟悉了 RStudio 环境，练习了 R 的基本运算、变量赋值和向量操作，并成功安装和加载了 `tidyverse`。这些是后续进行更复杂数据分析的基础。确保你理解了向量的概念以及如何创建和访问它们。