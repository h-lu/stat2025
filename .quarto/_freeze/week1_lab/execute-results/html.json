{
  "hash": "009b8390a7175294be925860e8f9c38e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"第一周实验：R 环境与基础操作\"\nexecute:\n  echo: true\n  message: false\n  warning: false\n  error: false\n  cache: false\n---\n\n\n\n\n\n## 1. 目标\n\n本实验旨在帮助你熟悉 R 和 RStudio 环境，练习基本的 R 语法，并为后续的数据分析打下基础。\n\n-   熟悉 RStudio 界面。\n-   练习使用 R 作为计算器。\n-   掌握变量赋值。\n-   理解并创建不同类型的向量。\n-   安装并加载 `tidyverse` 包。\n-   (可选) 尝试使用 AI 助手查询简单问题。\n\n## 2. RStudio 环境熟悉\n\n打开 RStudio，花几分钟熟悉以下几个主要窗口：\n\n1.  **脚本编辑器 (Script Editor / Source Pane):** 左上角。用于编写和保存 R 代码脚本 (.R 文件) 或 Quarto/R Markdown 文档 (.qmd / .Rmd)。\n2.  **控制台 (Console):** 左下角。用于直接输入和执行 R 命令，查看输出结果和错误信息。`>` 符号是命令提示符。\n3.  **环境/历史记录 (Environment/History):** 右上角。\n    -   `Environment`: 显示当前工作空间中已创建的对象（变量、数据框、函数等）。\n    -   `History`: 显示你之前在控制台中执行过的命令。\n4.  **文件/图形/包/帮助 (Files/Plots/Packages/Help/Viewer):** 右下角。\n    -   `Files`: 浏览你的计算机文件系统。\n    -   `Plots`: 显示生成的图形。\n    -   `Packages`: 查看已安装的 R 包，加载或卸载包，安装新包。\n    -   `Help`: 查看 R 函数或数据集的帮助文档。\n    -   `Viewer`: 显示本地网页内容（例如 `shiny` 应用或 `htmlwidgets`）。\n\n**尝试:** \n\n* 在**控制台**中输入 `1 + 1` 并按 Enter。\n* 在**脚本编辑器**中输入 `x <- 5`，然后选中这行代码，点击 \"Run\" 按钮（或使用快捷键 Cmd/Ctrl + Enter）。观察**环境**窗口中是否出现了变量 `x`。\n* 在**控制台**中输入 `?mean` 查看 `mean` 函数的帮助文档，观察**帮助**窗口的变化。\n\n## 3. R 作为计算器\n\n在控制台中尝试执行以下计算：\n\n```r\n# 加法\n5 + 12\n\n# 减法\n100 - 45\n\n# 乘法\n6 * 7\n\n# 除法\n50 / 4\n\n# 幂运算 (2 的 5 次方)\n2 ^ 5\n\n# 模运算 (取余数)\n17 %% 5\n\n# 整数除法\n17 %/% 5\n\n# 复杂表达式 (注意运算优先级)\n(5 + 3) * 2 / 4 - 1\n```\n\n## 4. 变量赋值与基本类型\n\n-   使用 `<-` 将计算结果赋值给变量。\n-   变量名可以包含字母、数字、点 (`.`) 和下划线 (`_`)，但必须以字母或点开头（如果以点开头，后面不能是数字）。区分大小写。\n\n```r\n# 将 10 赋值给变量 a\na <- 10\n\n# 将 \"Hello\" 赋值给变量 message\nmessage <- \"Hello, R learners!\"\n\n# 创建一个逻辑变量\nis_learning <- TRUE\n\n# 查看变量的值\na\nmessage\nis_learning\n\n# 对变量进行运算\nb <- a * 3\nb\n\n# 查看变量的数据类型\nclass(a)\nclass(message)\nclass(is_learning)\n```\n\n**练习:** \n\n1. 创建一个变量 `my_age` 并存储你的年龄。\n2. 创建一个变量 `course_name` 并存储课程名称 \"STAT & R\"。\n3. 计算 `my_age` 的 5 年后年龄，并将结果存储在 `age_in_5_years` 中。\n4. 查看 `age_in_5_years` 的值和类型。\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 在这里写你的练习代码\nmy_age <- 20 # 替换成你的年龄\ncourse_name <- \"STAT & R\"\nage_in_5_years <- my_age + 5\nage_in_5_years\nclass(age_in_5_years)\n```\n:::\n\n\n\n\n\n## 5. 向量 (Vectors)\n\n向量是 R 中最基本的数据结构，用于存储**相同类型**的元素序列。使用 `c()` 函数创建。\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 数值向量\nnumeric_vec <- c(10.5, 5.2, 8.0, 1.5)\nnumeric_vec\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 10.5  5.2  8.0  1.5\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(numeric_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] \"numeric\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(numeric_vec) # 查看向量长度\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 4\n```\n\n\n:::\n\n```{.r .cell-code}\n# 整数向量 (可以在数字后加 L)\ninteger_vec <- c(1L, 5L, 10L, -2L)\ninteger_vec\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1]  1  5 10 -2\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(integer_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] \"integer\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# 字符向量\nchar_vec <- c(\"apple\", \"banana\", \"cherry\", \"date\")\nchar_vec\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] \"apple\"  \"banana\" \"cherry\" \"date\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(char_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# 逻辑向量\nlogical_vec <- c(TRUE, FALSE, FALSE, TRUE, TRUE)\nlogical_vec\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1]  TRUE FALSE FALSE  TRUE  TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(logical_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] \"logical\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# 访问向量元素 (索引从 1 开始)\nchar_vec[1]       # 第一个元素\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] \"apple\"\n```\n\n\n:::\n\n```{.r .cell-code}\nnumeric_vec[3]    # 第三个元素\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 8\n```\n\n\n:::\n\n```{.r .cell-code}\nnumeric_vec[c(1, 4)] # 第一个和第四个元素\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 10.5  1.5\n```\n\n\n:::\n\n```{.r .cell-code}\nnumeric_vec[2:4]    # 第二个到第四个元素\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 5.2 8.0 1.5\n```\n\n\n:::\n\n```{.r .cell-code}\n# 向量运算 (通常是元素级别的)\nvec1 <- c(1, 2, 3)\nvec2 <- c(4, 5, 6)\nvec1 + vec2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 5 7 9\n```\n\n\n:::\n\n```{.r .cell-code}\nvec1 * 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 2 4 6\n```\n\n\n:::\n\n```{.r .cell-code}\nvec1 > 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] FALSE  TRUE  TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# 向量类型强制转换\nmixed_vec <- c(1, \"two\", TRUE)\nmixed_vec # 所有元素都变成了字符型\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] \"1\"    \"two\"  \"TRUE\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(mixed_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] \"character\"\n```\n\n\n:::\n:::\n\n\n\n\n\n**练习:** 1. 创建包含你最喜欢的 3 部电影名称的字符向量 `favorite_movies`。 2. 创建包含这 3 部电影大致评分（1-10）的数值向量 `movie_ratings`。 3. 访问 `favorite_movies` 中的第二部电影名称。 4. 访问 `movie_ratings` 中评分大于 8 的所有评分。 (提示: 可以使用逻辑索引 `movie_ratings[movie_ratings > 8]`)\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 在这里写你的练习代码\nfavorite_movies <- c(\"Inception\", \"The Dark Knight\", \"Interstellar\")\nmovie_ratings <- c(9.0, 9.2, 8.8)\nfavorite_movies[2]\nmovie_ratings[movie_ratings > 8]\n```\n:::\n\n\n\n\n\n## 6. 安装与加载 `tidyverse`\n\n`tidyverse` 是我们进行数据科学工作流的核心工具集。\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 1. 安装 tidyverse (如果尚未安装)\n# 你只需要在你的 R 环境中执行一次这个命令。\n# 如果不确定是否安装过，可以先尝试加载，如果报错再安装。\n# install.packages(\"tidyverse\")\n\n# 2. 加载 tidyverse\n# 每次启动新的 R 会话 (Session) 时，如果需要使用 tidyverse 中的函数，\n# 都需要先加载它。\nlibrary(tidyverse)\n\n# 加载成功后，会显示 tidyverse 包含的核心包及其版本信息。\n```\n:::\n\n\n\n\n\n**检查:** 加载 `tidyverse` 后，在控制台中输入 `dplyr::` 并按 Tab 键，是否能看到 `dplyr` 包中的函数列表（如 `filter`, `mutate` 等）？\n\n## 7. (可选) 尝试 AI 助手\n\n打开你选择的 AI 助手（如 ChatGPT 网页版，或 VS Code 中的 Copilot Chat）。\n\n**尝试提问:** \\* \"How do I create a sequence of numbers from 1 to 10 in R?\" (提示: 答案可能是 `1:10` 或 `seq(1, 10)`) \\* \"What does the `length()` function do in R?\" \\* \"Give me an example of assigning a calculation result to a variable in R.\"\n\n**思考:** \\* AI 的回答是否准确？ \\* AI 的解释是否清晰？ \\* 与你自己查找帮助文档 (`?length`) 或讲义相比，AI 辅助的优缺点是什么？\n\n## 8. 实验总结\n\n在本实验中，我们熟悉了 RStudio 环境，练习了 R 的基本运算、变量赋值和向量操作，并成功安装和加载了 `tidyverse`。这些是后续进行更复杂数据分析的基础。确保你理解了向量的概念以及如何创建和访问它们。",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}