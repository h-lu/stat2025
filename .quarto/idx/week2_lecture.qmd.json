{"title":"第二周：数据的语言：获取、导入与初步描述","markdown":{"yaml":{"title":"第二周：数据的语言：获取、导入与初步描述","execute":{"echo":true,"message":false,"warning":false,"error":false,"cache":false}},"headingText":"1. 数据从何而来？","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nsource(\"R/setup_common.R\")\n```\n\n\n数据分析的第一步是获取数据。数据可以来自各种来源，并以不同的格式存储。\n\n-   **常见数据来源:**\n    -   **文件:** CSV (逗号分隔值), Excel (.xlsx), TXT (纯文本), JSON, XML 等。这是最常见的形式。\n    -   **数据库:** SQL 数据库 (如 PostgreSQL, MySQL), NoSQL 数据库。\n    -   **API (应用程序编程接口):** 从网站或服务（如社交媒体、天气服务）获取实时数据。\n    -   **网页抓取:** 从网页 HTML 中提取数据（需要注意合法性和道德规范）。\n-   **常见数据格式:**\n    -   **表格数据 (Tabular Data):** 行代表观测 (Observations)，列代表变量 (Variables)。这是我们本课程主要处理的格式。CSV 和 Excel 文件通常存储表格数据。\n    -   **非结构化数据:** 文本、图像、音频等。\n    -   **半结构化数据:** JSON, XML 等，具有一定的结构但不如表格数据规整。\n\n::: {.callout-note title=\"本周目标\"}\n-   了解常见的数据来源和格式。\n-   使用 `readr` 包高效导入 CSV 等文本文件。\n-   理解 R 中核心的表格数据结构：数据框 (Data Frame) 和 Tibble。\n-   认识并处理一种重要的变量类型：因子 (Factor)。\n-   计算并解释描述性统计量，包括集中趋势和离散趋势。\n-   初步掌握 `dplyr` 包中的数据筛选和选择功能。\n:::\n\n## 2. `readr`：高效导入数据\n\n`tidyverse` 中的 `readr` 包提供了快速、友好的函数来读取矩形数据（如 CSV 和 TSV）。\n\n-   **核心函数:**\n\n    -   `read_csv()`: 读取逗号分隔的文件。\n    -   `read_tsv()`: 读取制表符分隔的文件。\n    -   `read_delim()`: 读取使用任意分隔符的文件。\n    -   `read_fwf()`: 读取固定宽度文件。\n    -   `read_log()`: 读取 Apache 风格的日志文件。\n    -   `read_excel()`: (来自 `readxl` 包，通常与 `tidyverse` 一起使用) 读取 Excel 文件。\n\n-   **`read_csv()` 示例:** 假设我们有一个名为 `students.csv` 的文件：\n\n    ```csv\n        Name,Age,Major,GPA\n        Alice,21,Statistics,3.8\n        Bob,22,Computer Science,3.5\n        Charlie,20,Mathematics,3.9\n        David,21,Statistics,3.6\n    ```\n\n    在 R 中读取：\n    ```{r}\n    library(tidyverse) # 加载tidyverse通常也会加载readr\n\n    # 假设 students.csv 在当前工作目录下\n    # 如果不在，需要提供完整或相对路径\n    # students_data <- read_csv(\"path/to/your/students.csv\")\n\n    # 为了演示，我们直接用文本创建数据\n    csv_text <- \"Name,Age,Major,GPA\\nAlice,21,Statistics,3.8\\nBob,22,Computer Science,3.5\\nCharlie,20,Mathematics,3.9\\nDavid,21,Statistics,3.6\"\n\n    students_data <- read_csv(csv_text)\n\n    print(students_data)\n    ```\n\n    `read_csv()` 会自动猜测列的类型，并返回一个 Tibble 对象。\n\n-   **常用参数:**\n\n    -   `file`: 文件路径或 URL。\n    -   `col_names`: 是否包含列名 (默认为 `TRUE`)。如果文件没有列名，设为 `FALSE`，`readr` 会自动生成 `X1`, `X2`...\n    -   `col_types`: 手动指定列类型，提高稳定性和速度。\n    -   `na`: 指定哪些字符串应被视作缺失值 (默认识别 \"NA\")。\n    -   `skip`: 跳过文件开头的行数。\n    -   `n_max`: 最多读取的行数。\n\n    ```r\n    # 示例：指定列类型，将 \"N/A\" 视作缺失值\n    students_data_spec <- read_csv(\n      \"students.csv\",\n      col_types = cols(\n        Name = col_character(),\n        Age = col_integer(),\n        Major = col_character(),\n        GPA = col_double()\n      ),\n      na = c(\"NA\", \"N/A\")\n    )\n    ```\n\n## 3. 数据框 (Data Frame) 与 Tibble\n\n-   **数据框 (Data Frame):** R 中存储表格数据的标准结构。\n    -   本质上是一个**等长**向量的列表。\n    -   每一列是一个向量，必须包含**相同类型**的数据。\n    -   不同列可以包含不同类型的数据。\n    -   创建示例： \n    ```{r}\n    df <- data.frame(\n      ID = c(101, 102, 103),\n      Product = c(\"A\", \"B\", \"A\"),\n      Price = c(15.5, 20.0, 16.0),\n      InStock = c(TRUE, FALSE, TRUE)\n    )\n\n    print(df)\n    str(df) # 查看数据框结构\n    ```\n-   **Tibble:** `tidyverse` 对数据框的现代优化版本。\n    -   `readr` 函数默认返回 Tibble。\n    -   **优点:**\n        -   打印更友好：只显示前 10 行和适合屏幕的列。\n        -   不会自动将字符串转换为因子 (Factor)。\n        -   不会改变列名（例如，不允许非法字符）。\n        -   子集提取 (`[`) 行为更一致。\n    -   大多数情况下，可以像使用数据框一样使用 Tibble。\n    -   `tibble()` 函数创建 Tibble，`as_tibble()` 将数据框转换为 Tibble。\n    ```{r}\n    library(tibble)\n\n    tb <- tibble(\n      ID = c(101, 102, 103),\n      Product = c(\"A\", \"B\", \"A\"),\n      Price = c(15.5, 20.0, 16.0),\n      InStock = c(TRUE, FALSE, TRUE)\n    )\n\n    print(tb)\n    str(tb)\n    ```\n\n## 4. 变量类型：因子 (Factor)\n\n因子是 R 中用来表示**分类变量** (Categorical Variable) 的特殊数据类型。分类变量的值来自一个固定的、已知的集合，称为**水平 (Levels)**。\n\n-   **应用场景:** 性别 (男/女)、学历 (本科/硕士/博士)、产品类别 (A/B/C) 等。\n\n-   **为何使用因子？**\n\n    -   节省内存（内部存储为整数）。\n    -   在统计建模和绘图中（如 `ggplot2`）通常需要因子类型来正确处理分类变量。\n    -   可以指定水平的顺序（例如，教育程度：小学 \\< 中学 \\< 大学）。\n\n-   **创建和使用:**\n\n    ```{r}\n    # 假设有一个字符向量表示教育程度\n    education_char <- c(\"Bachelor\", \"Master\", \"Bachelor\", \"PhD\", \"Master\")\n\n    # 将其转换为因子\n    education_factor <- factor(education_char)\n    print(education_factor)\n    levels(education_factor) # 查看水平\n\n    # 查看内部存储 (整数)\n    as.numeric(education_factor)\n\n    # 创建有序因子 (指定水平顺序)\n    education_ordered <- factor(\n      education_char,\n      levels = c(\"Bachelor\", \"Master\", \"PhD\"), # 指定顺序\n      ordered = TRUE\n    )\n\n    print(education_ordered)\n    education_ordered[1] < education_ordered[2] # 可以比较顺序\n    ```\n\n    ::: {.callout-important title=\"`stringsAsFactors`\"}\n    在旧版本的 R (\\< 4.0) 中，`data.frame()` 默认会将字符向量转换为因子。`tidyverse` (包括 `readr` 和 `tibble`) **不会**自动这样做，这通常是更期望的行为。如果需要因子，请显式转换。\n    :::\n\n## 5. 描述性统计 I：数据的\"中心\"在哪里？(集中趋势)\n\n描述性统计用于总结和描述数据集的主要特征。集中趋势度量了数据的中心位置。\n\n-   **均值 (Mean):** 数据的算术平均值。对异常值敏感。\n    -   公式: $\\bar{x} = \\frac{\\sum_{i=1}^{n} x_i}{n}$\n\n    -   R 实现: `mean()`\n\n        ```{r}\n        scores <- c(85, 92, 78, 88, 95, 72)\n        mean(scores)\n\n        # 处理缺失值 (NA)\n        scores_na <- c(85, 92, NA, 88, 95, 72)\n        mean(scores_na) # 结果是 NA\n        mean(scores_na, na.rm = TRUE) # 移除 NA 后计算\n        ```\n-   **中位数 (Median):** 将数据排序后位于中间位置的值。对异常值不敏感（稳健）。\n    -   如果 n 为奇数，中位数是第 $\\frac{n+1}{2}$ 个值。\n\n    -   如果 n 为偶数，中位数是第 $\\frac{n}{2}$ 和第 $\\frac{n}{2}+1$ 个值的平均值。\n\n    -   R 实现: `median()`\n\n        ```{r}\n        median(scores)\n        median(scores_na, na.rm = TRUE)\n\n        # 比较均值和中位数 (异常值影响)\n        scores_outlier <- c(85, 92, 78, 88, 95, 72, 200)\n        mean(scores_outlier)\n        median(scores_outlier)\n        ```\n-   **众数 (Mode):** 数据集中出现次数最多的值。适用于分类数据，也可用于数值数据。R 基础包没有直接计算众数的函数，通常需要自定义或使用其他包。\n\n## 6. 描述性统计 II：数据的\"散布\"程度如何？(离散趋势)\n\n离散趋势度量了数据围绕中心值的散布或变异程度。\n\n-   **极差 (Range):** 最大值与最小值的差。简单但易受异常值影响。\n    -   R 实现: `range()` 返回最小值和最大值，`diff(range(x))` 计算极差。\n    ```{r}\n    range(scores)\n    diff(range(scores))\n    ```\n-   **分位数 (Quantiles):** 将数据排序后，按特定比例分割数据的值。\n    -   **四分位数 (Quartiles):** 将数据分为四等份的点。\n        -   Q1 (第一四分位数): 25% 的数据小于该值。\n        -   Q2 (第二四分位数): 50% 的数据小于该值，即**中位数**。\n        -   Q3 (第三四分位数): 75% 的数据小于该值。\n    -   **四分位距 (Interquartile Range, IQR):** Q3 与 Q1 的差 ($IQR = Q3 - Q1$)。衡量数据中间 50% 的散布范围，对异常值稳健。\n    -   R 实现: `quantile()`, `IQR()`\n\n    ```{r}\n    quantile(scores) # 默认计算 0%, 25%, 50%, 75%, 100% 分位数\n    quantile(scores, probs = c(0.1, 0.9)) # 计算 10% 和 90% 分位数\n    IQR(scores)\n    ```\n\n-   **方差 (Variance):** 数据点与其均值之差的平方的平均值。度量数据偏离均值的平均程度。单位是原始数据的平方。\n    -   样本方差公式: $s^2 = \\frac{\\sum_{i=1}^{n} (x_i - \\bar{x})^2}{n-1}$ (注意分母是 n-1，无偏估计)\n    -   R 实现: `var()`\n\n    ```{r}\n    var(scores)\n    ```\n-   **标准差 (Standard Deviation):** 方差的平方根。与原始数据具有相同的单位，更易于解释。\n    -   样本标准差公式: $s = \\sqrt{s^2} = \\sqrt{\\frac{\\sum_{i=1}^{n} (x_i - \\bar{x})^2}{n-1}}$\n    -   R 实现: `sd()`\n    ```{r}\n    sd(scores)\n    sqrt(var(scores)) # 结果与 sd(scores) 相同\n    ```\n\n::: {.callout-info title=\"选择哪个度量？\"}\n-   **集中趋势:**\n    -   数据对称且无极端异常值：均值。\n    -   数据偏斜或有异常值：中位数。\n-   **离散趋势:**\n    -   数据对称且无极端异常值：标准差（结合均值）。\n    -   数据偏斜或有异常值：IQR（结合中位数）。\n:::\n\n## 7. `dplyr` 初步：数据操作的瑞士军刀\n\n`dplyr` 是 `tidyverse` 的核心包之一，提供了用于数据操作（筛选、选择、变换、汇总、排序）的一致且高效的函数（称为 \"verbs\"）。\n\n-   **核心思想:** 每个函数只做一件事，通过管道 (`%>%`) 连接起来完成复杂操作。\n\n-   **管道操作符 (`%>%`):** 将左侧对象作为右侧函数的第一个参数传递。读作 \"then\"。\n\n    -   `x %>% f(y)` 等价于 `f(x, y)`\n    -   `x %>% f(y) %>% g(z)` 等价于 `g(f(x, y), z)`\n\n-   **本周学习的 `dplyr` 动词:**\n\n    -   `select()`: 按名称选择列。\n    -   `filter()`: 根据条件筛选行。\n\n-   **`select()` 示例:** (使用之前创建的 `students_data` Tibble)\n\n    ```{r}\n    library(dplyr)\n\n    # 选择 Name 和 GPA 列\n    select(students_data, Name, GPA)\n\n    # 选择除 Major 之外的所有列\n    select(students_data, -Major)\n\n    # 选择从 Name 到 Major 的所有列\n    select(students_data, Name:Major)\n\n    # 使用管道\n    students_data %>% select(Name, Age)\n    ```\n\n-   **`filter()` 示例:**\n\n    ```{r}\n    # 筛选 Major 为 Statistics 的学生\n    filter(students_data, Major == \"Statistics\")\n\n    # 筛选 Age 大于 20 的学生\n    filter(students_data, Age > 20)\n\n    # 筛选 Major 为 Statistics 且 GPA 大于 3.7 的学生\n    filter(students_data, Major == \"Statistics\", GPA > 3.7) # 逗号表示 \"与\"\n    # 或者使用 &\n    filter(students_data, Major == \"Statistics\" & GPA > 3.7)\n\n    # 筛选 Major 为 Statistics 或 Mathematics 的学生\n    filter(students_data, Major == \"Statistics\" | Major == \"Mathematics\")\n    # 或者使用 %in%\n    filter(students_data, Major %in% c(\"Statistics\", \"Mathematics\"))\n\n    # 结合管道\n    students_data %>%\n      filter(Age >= 21) %>%\n      select(Name, GPA)\n    ```\n\n## 8. 项目相关与本周总结\n\n-   **项目任务:** 尝试使用 `readr` 函数导入一份真实数据（如果是 CSV 或类似格式）。检查导入后的数据结构 (`str()`, `glimpse()`)，看看列类型是否符合预期。\n-   **本周回顾:** 我们学习了如何将数据读入 R，理解了数据框和 Tibble，认识了因子类型，并掌握了计算基本描述性统计量和使用 `dplyr` 进行初步筛选和选择的方法。这些是进行任何数据分析的基础。\n\n**下周预告:** 我们将深入学习 `dplyr` 和 `tidyr`，掌握更多数据整理和变形的强大技术，为更复杂的数据分析和可视化做准备。","srcMarkdownNoYaml":"\n\n```{r setup, include=FALSE}\nsource(\"R/setup_common.R\")\n```\n\n## 1. 数据从何而来？\n\n数据分析的第一步是获取数据。数据可以来自各种来源，并以不同的格式存储。\n\n-   **常见数据来源:**\n    -   **文件:** CSV (逗号分隔值), Excel (.xlsx), TXT (纯文本), JSON, XML 等。这是最常见的形式。\n    -   **数据库:** SQL 数据库 (如 PostgreSQL, MySQL), NoSQL 数据库。\n    -   **API (应用程序编程接口):** 从网站或服务（如社交媒体、天气服务）获取实时数据。\n    -   **网页抓取:** 从网页 HTML 中提取数据（需要注意合法性和道德规范）。\n-   **常见数据格式:**\n    -   **表格数据 (Tabular Data):** 行代表观测 (Observations)，列代表变量 (Variables)。这是我们本课程主要处理的格式。CSV 和 Excel 文件通常存储表格数据。\n    -   **非结构化数据:** 文本、图像、音频等。\n    -   **半结构化数据:** JSON, XML 等，具有一定的结构但不如表格数据规整。\n\n::: {.callout-note title=\"本周目标\"}\n-   了解常见的数据来源和格式。\n-   使用 `readr` 包高效导入 CSV 等文本文件。\n-   理解 R 中核心的表格数据结构：数据框 (Data Frame) 和 Tibble。\n-   认识并处理一种重要的变量类型：因子 (Factor)。\n-   计算并解释描述性统计量，包括集中趋势和离散趋势。\n-   初步掌握 `dplyr` 包中的数据筛选和选择功能。\n:::\n\n## 2. `readr`：高效导入数据\n\n`tidyverse` 中的 `readr` 包提供了快速、友好的函数来读取矩形数据（如 CSV 和 TSV）。\n\n-   **核心函数:**\n\n    -   `read_csv()`: 读取逗号分隔的文件。\n    -   `read_tsv()`: 读取制表符分隔的文件。\n    -   `read_delim()`: 读取使用任意分隔符的文件。\n    -   `read_fwf()`: 读取固定宽度文件。\n    -   `read_log()`: 读取 Apache 风格的日志文件。\n    -   `read_excel()`: (来自 `readxl` 包，通常与 `tidyverse` 一起使用) 读取 Excel 文件。\n\n-   **`read_csv()` 示例:** 假设我们有一个名为 `students.csv` 的文件：\n\n    ```csv\n        Name,Age,Major,GPA\n        Alice,21,Statistics,3.8\n        Bob,22,Computer Science,3.5\n        Charlie,20,Mathematics,3.9\n        David,21,Statistics,3.6\n    ```\n\n    在 R 中读取：\n    ```{r}\n    library(tidyverse) # 加载tidyverse通常也会加载readr\n\n    # 假设 students.csv 在当前工作目录下\n    # 如果不在，需要提供完整或相对路径\n    # students_data <- read_csv(\"path/to/your/students.csv\")\n\n    # 为了演示，我们直接用文本创建数据\n    csv_text <- \"Name,Age,Major,GPA\\nAlice,21,Statistics,3.8\\nBob,22,Computer Science,3.5\\nCharlie,20,Mathematics,3.9\\nDavid,21,Statistics,3.6\"\n\n    students_data <- read_csv(csv_text)\n\n    print(students_data)\n    ```\n\n    `read_csv()` 会自动猜测列的类型，并返回一个 Tibble 对象。\n\n-   **常用参数:**\n\n    -   `file`: 文件路径或 URL。\n    -   `col_names`: 是否包含列名 (默认为 `TRUE`)。如果文件没有列名，设为 `FALSE`，`readr` 会自动生成 `X1`, `X2`...\n    -   `col_types`: 手动指定列类型，提高稳定性和速度。\n    -   `na`: 指定哪些字符串应被视作缺失值 (默认识别 \"NA\")。\n    -   `skip`: 跳过文件开头的行数。\n    -   `n_max`: 最多读取的行数。\n\n    ```r\n    # 示例：指定列类型，将 \"N/A\" 视作缺失值\n    students_data_spec <- read_csv(\n      \"students.csv\",\n      col_types = cols(\n        Name = col_character(),\n        Age = col_integer(),\n        Major = col_character(),\n        GPA = col_double()\n      ),\n      na = c(\"NA\", \"N/A\")\n    )\n    ```\n\n## 3. 数据框 (Data Frame) 与 Tibble\n\n-   **数据框 (Data Frame):** R 中存储表格数据的标准结构。\n    -   本质上是一个**等长**向量的列表。\n    -   每一列是一个向量，必须包含**相同类型**的数据。\n    -   不同列可以包含不同类型的数据。\n    -   创建示例： \n    ```{r}\n    df <- data.frame(\n      ID = c(101, 102, 103),\n      Product = c(\"A\", \"B\", \"A\"),\n      Price = c(15.5, 20.0, 16.0),\n      InStock = c(TRUE, FALSE, TRUE)\n    )\n\n    print(df)\n    str(df) # 查看数据框结构\n    ```\n-   **Tibble:** `tidyverse` 对数据框的现代优化版本。\n    -   `readr` 函数默认返回 Tibble。\n    -   **优点:**\n        -   打印更友好：只显示前 10 行和适合屏幕的列。\n        -   不会自动将字符串转换为因子 (Factor)。\n        -   不会改变列名（例如，不允许非法字符）。\n        -   子集提取 (`[`) 行为更一致。\n    -   大多数情况下，可以像使用数据框一样使用 Tibble。\n    -   `tibble()` 函数创建 Tibble，`as_tibble()` 将数据框转换为 Tibble。\n    ```{r}\n    library(tibble)\n\n    tb <- tibble(\n      ID = c(101, 102, 103),\n      Product = c(\"A\", \"B\", \"A\"),\n      Price = c(15.5, 20.0, 16.0),\n      InStock = c(TRUE, FALSE, TRUE)\n    )\n\n    print(tb)\n    str(tb)\n    ```\n\n## 4. 变量类型：因子 (Factor)\n\n因子是 R 中用来表示**分类变量** (Categorical Variable) 的特殊数据类型。分类变量的值来自一个固定的、已知的集合，称为**水平 (Levels)**。\n\n-   **应用场景:** 性别 (男/女)、学历 (本科/硕士/博士)、产品类别 (A/B/C) 等。\n\n-   **为何使用因子？**\n\n    -   节省内存（内部存储为整数）。\n    -   在统计建模和绘图中（如 `ggplot2`）通常需要因子类型来正确处理分类变量。\n    -   可以指定水平的顺序（例如，教育程度：小学 \\< 中学 \\< 大学）。\n\n-   **创建和使用:**\n\n    ```{r}\n    # 假设有一个字符向量表示教育程度\n    education_char <- c(\"Bachelor\", \"Master\", \"Bachelor\", \"PhD\", \"Master\")\n\n    # 将其转换为因子\n    education_factor <- factor(education_char)\n    print(education_factor)\n    levels(education_factor) # 查看水平\n\n    # 查看内部存储 (整数)\n    as.numeric(education_factor)\n\n    # 创建有序因子 (指定水平顺序)\n    education_ordered <- factor(\n      education_char,\n      levels = c(\"Bachelor\", \"Master\", \"PhD\"), # 指定顺序\n      ordered = TRUE\n    )\n\n    print(education_ordered)\n    education_ordered[1] < education_ordered[2] # 可以比较顺序\n    ```\n\n    ::: {.callout-important title=\"`stringsAsFactors`\"}\n    在旧版本的 R (\\< 4.0) 中，`data.frame()` 默认会将字符向量转换为因子。`tidyverse` (包括 `readr` 和 `tibble`) **不会**自动这样做，这通常是更期望的行为。如果需要因子，请显式转换。\n    :::\n\n## 5. 描述性统计 I：数据的\"中心\"在哪里？(集中趋势)\n\n描述性统计用于总结和描述数据集的主要特征。集中趋势度量了数据的中心位置。\n\n-   **均值 (Mean):** 数据的算术平均值。对异常值敏感。\n    -   公式: $\\bar{x} = \\frac{\\sum_{i=1}^{n} x_i}{n}$\n\n    -   R 实现: `mean()`\n\n        ```{r}\n        scores <- c(85, 92, 78, 88, 95, 72)\n        mean(scores)\n\n        # 处理缺失值 (NA)\n        scores_na <- c(85, 92, NA, 88, 95, 72)\n        mean(scores_na) # 结果是 NA\n        mean(scores_na, na.rm = TRUE) # 移除 NA 后计算\n        ```\n-   **中位数 (Median):** 将数据排序后位于中间位置的值。对异常值不敏感（稳健）。\n    -   如果 n 为奇数，中位数是第 $\\frac{n+1}{2}$ 个值。\n\n    -   如果 n 为偶数，中位数是第 $\\frac{n}{2}$ 和第 $\\frac{n}{2}+1$ 个值的平均值。\n\n    -   R 实现: `median()`\n\n        ```{r}\n        median(scores)\n        median(scores_na, na.rm = TRUE)\n\n        # 比较均值和中位数 (异常值影响)\n        scores_outlier <- c(85, 92, 78, 88, 95, 72, 200)\n        mean(scores_outlier)\n        median(scores_outlier)\n        ```\n-   **众数 (Mode):** 数据集中出现次数最多的值。适用于分类数据，也可用于数值数据。R 基础包没有直接计算众数的函数，通常需要自定义或使用其他包。\n\n## 6. 描述性统计 II：数据的\"散布\"程度如何？(离散趋势)\n\n离散趋势度量了数据围绕中心值的散布或变异程度。\n\n-   **极差 (Range):** 最大值与最小值的差。简单但易受异常值影响。\n    -   R 实现: `range()` 返回最小值和最大值，`diff(range(x))` 计算极差。\n    ```{r}\n    range(scores)\n    diff(range(scores))\n    ```\n-   **分位数 (Quantiles):** 将数据排序后，按特定比例分割数据的值。\n    -   **四分位数 (Quartiles):** 将数据分为四等份的点。\n        -   Q1 (第一四分位数): 25% 的数据小于该值。\n        -   Q2 (第二四分位数): 50% 的数据小于该值，即**中位数**。\n        -   Q3 (第三四分位数): 75% 的数据小于该值。\n    -   **四分位距 (Interquartile Range, IQR):** Q3 与 Q1 的差 ($IQR = Q3 - Q1$)。衡量数据中间 50% 的散布范围，对异常值稳健。\n    -   R 实现: `quantile()`, `IQR()`\n\n    ```{r}\n    quantile(scores) # 默认计算 0%, 25%, 50%, 75%, 100% 分位数\n    quantile(scores, probs = c(0.1, 0.9)) # 计算 10% 和 90% 分位数\n    IQR(scores)\n    ```\n\n-   **方差 (Variance):** 数据点与其均值之差的平方的平均值。度量数据偏离均值的平均程度。单位是原始数据的平方。\n    -   样本方差公式: $s^2 = \\frac{\\sum_{i=1}^{n} (x_i - \\bar{x})^2}{n-1}$ (注意分母是 n-1，无偏估计)\n    -   R 实现: `var()`\n\n    ```{r}\n    var(scores)\n    ```\n-   **标准差 (Standard Deviation):** 方差的平方根。与原始数据具有相同的单位，更易于解释。\n    -   样本标准差公式: $s = \\sqrt{s^2} = \\sqrt{\\frac{\\sum_{i=1}^{n} (x_i - \\bar{x})^2}{n-1}}$\n    -   R 实现: `sd()`\n    ```{r}\n    sd(scores)\n    sqrt(var(scores)) # 结果与 sd(scores) 相同\n    ```\n\n::: {.callout-info title=\"选择哪个度量？\"}\n-   **集中趋势:**\n    -   数据对称且无极端异常值：均值。\n    -   数据偏斜或有异常值：中位数。\n-   **离散趋势:**\n    -   数据对称且无极端异常值：标准差（结合均值）。\n    -   数据偏斜或有异常值：IQR（结合中位数）。\n:::\n\n## 7. `dplyr` 初步：数据操作的瑞士军刀\n\n`dplyr` 是 `tidyverse` 的核心包之一，提供了用于数据操作（筛选、选择、变换、汇总、排序）的一致且高效的函数（称为 \"verbs\"）。\n\n-   **核心思想:** 每个函数只做一件事，通过管道 (`%>%`) 连接起来完成复杂操作。\n\n-   **管道操作符 (`%>%`):** 将左侧对象作为右侧函数的第一个参数传递。读作 \"then\"。\n\n    -   `x %>% f(y)` 等价于 `f(x, y)`\n    -   `x %>% f(y) %>% g(z)` 等价于 `g(f(x, y), z)`\n\n-   **本周学习的 `dplyr` 动词:**\n\n    -   `select()`: 按名称选择列。\n    -   `filter()`: 根据条件筛选行。\n\n-   **`select()` 示例:** (使用之前创建的 `students_data` Tibble)\n\n    ```{r}\n    library(dplyr)\n\n    # 选择 Name 和 GPA 列\n    select(students_data, Name, GPA)\n\n    # 选择除 Major 之外的所有列\n    select(students_data, -Major)\n\n    # 选择从 Name 到 Major 的所有列\n    select(students_data, Name:Major)\n\n    # 使用管道\n    students_data %>% select(Name, Age)\n    ```\n\n-   **`filter()` 示例:**\n\n    ```{r}\n    # 筛选 Major 为 Statistics 的学生\n    filter(students_data, Major == \"Statistics\")\n\n    # 筛选 Age 大于 20 的学生\n    filter(students_data, Age > 20)\n\n    # 筛选 Major 为 Statistics 且 GPA 大于 3.7 的学生\n    filter(students_data, Major == \"Statistics\", GPA > 3.7) # 逗号表示 \"与\"\n    # 或者使用 &\n    filter(students_data, Major == \"Statistics\" & GPA > 3.7)\n\n    # 筛选 Major 为 Statistics 或 Mathematics 的学生\n    filter(students_data, Major == \"Statistics\" | Major == \"Mathematics\")\n    # 或者使用 %in%\n    filter(students_data, Major %in% c(\"Statistics\", \"Mathematics\"))\n\n    # 结合管道\n    students_data %>%\n      filter(Age >= 21) %>%\n      select(Name, GPA)\n    ```\n\n## 8. 项目相关与本周总结\n\n-   **项目任务:** 尝试使用 `readr` 函数导入一份真实数据（如果是 CSV 或类似格式）。检查导入后的数据结构 (`str()`, `glimpse()`)，看看列类型是否符合预期。\n-   **本周回顾:** 我们学习了如何将数据读入 R，理解了数据框和 Tibble，认识了因子类型，并掌握了计算基本描述性统计量和使用 `dplyr` 进行初步筛选和选择的方法。这些是进行任何数据分析的基础。\n\n**下周预告:** 我们将深入学习 `dplyr` 和 `tidyr`，掌握更多数据整理和变形的强大技术，为更复杂的数据分析和可视化做准备。"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":false,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles/custom.css"],"toc":true,"number-sections":false,"include-in-header":[{"text":"<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css\" integrity=\"sha512-1ycn6IcaQQ40/MKBW2W4Rhis/DbILU74C1vSrLJxCq57o941Ym01SwNsOMqvEBFlcgUa6xkm/sYwpb+ilR5gUw==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\">\n"}],"output-file":"week2_lecture.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","knitr":{"opts_chunk":{"comment":"#>","fig.align":"center","fig.width":8,"fig.height":6,"out.width":"90%","dpi":300,"dev":"ragg_png"}},"theme":"cosmo","callout-appearance":"none","message":false,"title":"第二周：数据的语言：获取、导入与初步描述"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}