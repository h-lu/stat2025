{
  "hash": "b5323bbd89d5ffb7e2c50b9e4666daa0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"第二周实验：数据导入与描述性统计\"\nexecute:\n  echo: true\n  message: false\n  warning: false\n  error: false\n  cache: false\n---\n\n\n\n\n\n## 1. 目标\n\n本实验旨在练习使用 `readr` 包导入数据，熟悉数据框 (Data Frame) 和 Tibble，处理因子类型，并计算和解释基本的描述性统计量，同时初步使用 `dplyr` 进行数据筛选。\n\n-   使用 `read_csv()` 导入数据文件。\n-   检查和理解导入数据的结构 (`glimpse`, `str`, `summary`)。\n-   创建和操作因子变量 (`factor`, `levels`)。\n-   计算集中趋势（均值、中位数）和离散趋势（标准差、IQR、分位数）统计量。\n-   使用 `dplyr` 的 `select()` 和 `filter()` 选择和筛选数据。\n\n## 2. 数据导入 (`readr`)\n\n我们将使用一个模拟的学生成绩数据集 `grades.csv`。\n\n**`grades.csv` 文件内容:**\n\n``` csv\nStudentID,Name,Major,Exam1,Exam2,FinalProject,Attendance\nS001,Alice,Statistics,85,88,92,Present\nS002,Bob,CompSci,92,NA,85,Present\nS003,Charlie,Math,78,82,75,Absent\nS004,David,Statistics,88,90,95,Present\nS005,Eve,CompSci,75,80,NA,Absent\nS006,Frank,Statistics,95,98,96,Present\nS007,Grace,Math,NA,75,80,Present\nS008,Heidi,CompSci,81,84,88,Present\n```\n\n**任务:** 1. 将上面的 CSV 内容复制到一个**纯文本文件**中，并将其命名为 `grades.csv`，保存在你的 R 项目工作目录下（或者你知道其路径的地方）。 2. 使用 `readr::read_csv()` 函数将 `grades.csv` 文件读入 R，并将结果存储在一个名为 `grades_data` 的 Tibble 中。 3. 打印 `grades_data` 查看内容。\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse) # 加载 tidyverse 会自动加载 readr 和 dplyr\n\n# 请将 grades.csv 文件放在你的工作目录，或者修改下面的路径\nfile_path <- \"grades.csv\"\n\n# 检查文件是否存在 (可选)\nif (!file.exists(file_path)) {\n  # 如果文件不存在，则创建它（仅用于演示，实际应确保文件已存在）\n  csv_content <- \"StudentID,Name,Major,Exam1,Exam2,FinalProject,Attendance\\nS001,Alice,Statistics,85,88,92,Present\\nS002,Bob,CompSci,92,NA,85,Present\\nS003,Charlie,Math,78,82,75,Absent\\nS004,David,Statistics,88,90,95,Present\\nS005,Eve,CompSci,75,80,NA,Absent\\nS006,Frank,Statistics,95,98,96,Present\\nS007,Grace,Math,NA,75,80,Present\\nS008,Heidi,CompSci,81,84,88,Present\"\n  writeLines(csv_content, file_path)\n  print(\"grades.csv 文件已创建。\")\n  # stop(\"错误：找不到 grades.csv 文件。请确保文件在正确的位置。\")\n}\n\n# 使用 read_csv 导入数据\ngrades_data <- read_csv(file_path)\n\n# 打印数据\nprint(grades_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 8 × 7\n#>   StudentID Name    Major      Exam1 Exam2 FinalProject Attendance\n#>   <chr>     <chr>   <chr>      <dbl> <dbl>        <dbl> <chr>     \n#> 1 S001      Alice   Statistics    85    88           92 Present   \n#> 2 S002      Bob     CompSci       92    NA           85 Present   \n#> 3 S003      Charlie Math          78    82           75 Absent    \n#> 4 S004      David   Statistics    88    90           95 Present   \n#> 5 S005      Eve     CompSci       75    80           NA Absent    \n#> 6 S006      Frank   Statistics    95    98           96 Present   \n#> 7 S007      Grace   Math          NA    75           80 Present   \n#> 8 S008      Heidi   CompSci       81    84           88 Present\n```\n\n\n:::\n:::\n\n\n\n\n\n## 3. 数据结构探索\n\n导入数据后，检查其结构非常重要。\n\n**任务:** 使用以下函数探索 `grades_data` 的结构：\n\n1.  `glimpse()`: 快速查看数据结构，包括列名、类型和前几行数据。\n2.  `str()`: 显示对象的内部结构（更详细）。\n3.  `summary()`: 对每一列计算基本的描述性统计（对数值型计算最小值、Q1、中位数、均值、Q3、最大值、NA 数量；对字符型/因子型计算频数）。\n4.  `head()`: 查看前几行数据。\n5.  `tail()`: 查看后几行数据。\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 使用 glimpse 查看结构\nglimpse(grades_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Rows: 8\n#> Columns: 7\n#> $ StudentID    <chr> \"S001\", \"S002\", \"S003\", \"S004\", \"S005\", \"S006\", \"S007\", \"…\n#> $ Name         <chr> \"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Frank\", \"Grac…\n#> $ Major        <chr> \"Statistics\", \"CompSci\", \"Math\", \"Statistics\", \"CompSci\",…\n#> $ Exam1        <dbl> 85, 92, 78, 88, 75, 95, NA, 81\n#> $ Exam2        <dbl> 88, NA, 82, 90, 80, 98, 75, 84\n#> $ FinalProject <dbl> 92, 85, 75, 95, NA, 96, 80, 88\n#> $ Attendance   <chr> \"Present\", \"Present\", \"Absent\", \"Present\", \"Absent\", \"Pre…\n```\n\n\n:::\n\n```{.r .cell-code}\n# 使用 str 查看结构\nstr(grades_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> spc_tbl_ [8 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n#>  $ StudentID   : chr [1:8] \"S001\" \"S002\" \"S003\" \"S004\" ...\n#>  $ Name        : chr [1:8] \"Alice\" \"Bob\" \"Charlie\" \"David\" ...\n#>  $ Major       : chr [1:8] \"Statistics\" \"CompSci\" \"Math\" \"Statistics\" ...\n#>  $ Exam1       : num [1:8] 85 92 78 88 75 95 NA 81\n#>  $ Exam2       : num [1:8] 88 NA 82 90 80 98 75 84\n#>  $ FinalProject: num [1:8] 92 85 75 95 NA 96 80 88\n#>  $ Attendance  : chr [1:8] \"Present\" \"Present\" \"Absent\" \"Present\" ...\n#>  - attr(*, \"spec\")=\n#>   .. cols(\n#>   ..   StudentID = col_character(),\n#>   ..   Name = col_character(),\n#>   ..   Major = col_character(),\n#>   ..   Exam1 = col_double(),\n#>   ..   Exam2 = col_double(),\n#>   ..   FinalProject = col_double(),\n#>   ..   Attendance = col_character()\n#>   .. )\n#>  - attr(*, \"problems\")=<externalptr>\n```\n\n\n:::\n\n```{.r .cell-code}\n# 使用 summary 查看摘要统计\nsummary(grades_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>   StudentID             Name              Major               Exam1      \n#>  Length:8           Length:8           Length:8           Min.   :75.00  \n#>  Class :character   Class :character   Class :character   1st Qu.:79.50  \n#>  Mode  :character   Mode  :character   Mode  :character   Median :85.00  \n#>                                                           Mean   :84.86  \n#>                                                           3rd Qu.:90.00  \n#>                                                           Max.   :95.00  \n#>                                                           NA's   :1      \n#>      Exam2        FinalProject    Attendance       \n#>  Min.   :75.00   Min.   :75.00   Length:8          \n#>  1st Qu.:81.00   1st Qu.:82.50   Class :character  \n#>  Median :84.00   Median :88.00   Mode  :character  \n#>  Mean   :85.29   Mean   :87.29                     \n#>  3rd Qu.:89.00   3rd Qu.:93.50                     \n#>  Max.   :98.00   Max.   :96.00                     \n#>  NA's   :1       NA's   :1\n```\n\n\n:::\n\n```{.r .cell-code}\n# 查看前 3 行\nhead(grades_data, n = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 3 × 7\n#>   StudentID Name    Major      Exam1 Exam2 FinalProject Attendance\n#>   <chr>     <chr>   <chr>      <dbl> <dbl>        <dbl> <chr>     \n#> 1 S001      Alice   Statistics    85    88           92 Present   \n#> 2 S002      Bob     CompSci       92    NA           85 Present   \n#> 3 S003      Charlie Math          78    82           75 Absent\n```\n\n\n:::\n\n```{.r .cell-code}\n# 查看后 2 行\ntail(grades_data, n = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 2 × 7\n#>   StudentID Name  Major   Exam1 Exam2 FinalProject Attendance\n#>   <chr>     <chr> <chr>   <dbl> <dbl>        <dbl> <chr>     \n#> 1 S007      Grace Math       NA    75           80 Present   \n#> 2 S008      Heidi CompSci    81    84           88 Present\n```\n\n\n:::\n:::\n\n\n\n\n\n**思考:** \\* `read_csv` 自动识别的列类型是否都正确？ \\* 哪些列包含缺失值 (NA)？`summary()` 如何提示我们？ \\* `Major` 和 `Attendance` 列目前是什么类型？你认为它们应该是什么类型更合适？\n\n## 4. 因子 (Factor)\n\n`Major` 和 `Attendance` 列代表分类信息。将它们转换为因子类型通常更便于后续分析和绘图。\n\n**任务:** 1. 将 `grades_data` 中的 `Major` 列转换为因子类型。查看转换后的列和它的水平 (levels)。 2. 将 `Attendance` 列转换为因子类型。思考一下，`Attendance` 的水平是否有自然的顺序？（例如，\"Present\" 是否优于 \"Absent\"？在这个场景下可能没有）。 3. (可选挑战) 如果我们认为专业 \"Statistics\" \\> \"Math\" \\> \"CompSci\"，如何创建一个有序因子？\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 复制一份数据进行修改，避免影响原始导入数据\ngrades_data_factored <- grades_data\n\n# 1. 将 Major 转换为因子\ngrades_data_factored$Major <- factor(grades_data_factored$Major)\nprint(grades_data_factored$Major)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] Statistics CompSci    Math       Statistics CompSci    Statistics Math      \n#> [8] CompSci   \n#> Levels: CompSci Math Statistics\n```\n\n\n:::\n\n```{.r .cell-code}\nlevels(grades_data_factored$Major)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] \"CompSci\"    \"Math\"       \"Statistics\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# 2. 将 Attendance 转换为因子\ngrades_data_factored$Attendance <- factor(grades_data_factored$Attendance)\nprint(grades_data_factored$Attendance)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] Present Present Absent  Present Absent  Present Present Present\n#> Levels: Absent Present\n```\n\n\n:::\n\n```{.r .cell-code}\nlevels(grades_data_factored$Attendance)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] \"Absent\"  \"Present\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# 3. (可选挑战) 创建有序的 Major 因子\n# grades_data_factored$Major_Ordered <- factor(\n#   grades_data_factored$Major,\n#   levels = c(\"CompSci\", \"Math\", \"Statistics\"), # 指定顺序\n#   ordered = TRUE\n# )\n# print(grades_data_factored$Major_Ordered)\n# is.ordered(grades_data_factored$Major_Ordered)\n\n# 再次查看数据结构，确认类型已改变\nglimpse(grades_data_factored)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Rows: 8\n#> Columns: 7\n#> $ StudentID    <chr> \"S001\", \"S002\", \"S003\", \"S004\", \"S005\", \"S006\", \"S007\", \"…\n#> $ Name         <chr> \"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Frank\", \"Grac…\n#> $ Major        <fct> Statistics, CompSci, Math, Statistics, CompSci, Statistic…\n#> $ Exam1        <dbl> 85, 92, 78, 88, 75, 95, NA, 81\n#> $ Exam2        <dbl> 88, NA, 82, 90, 80, 98, 75, 84\n#> $ FinalProject <dbl> 92, 85, 75, 95, NA, 96, 80, 88\n#> $ Attendance   <fct> Present, Present, Absent, Present, Absent, Present, Prese…\n```\n\n\n:::\n:::\n\n\n\n\n\n## 5. 描述性统计计算\n\n现在我们来计算一些描述性统计量，以更好地理解数值型变量（如考试成绩）的分布。\n\n**任务:** 计算 `Exam1`, `Exam2`, 和 `FinalProject` 这三列的： 1. 均值 (Mean) 2. 中位数 (Median) 3. 标准差 (Standard Deviation) 4. 四分位距 (IQR) 5. 最小值 (Minimum) 和最大值 (Maximum) 6. 0.1 分位数和 0.9 分位数\n\n**注意处理缺失值 (NA)！** 很多函数需要设置 `na.rm = TRUE`。\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 计算 Exam1 的统计量\nmean(grades_data$Exam1, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 84.85714\n```\n\n\n:::\n\n```{.r .cell-code}\nmedian(grades_data$Exam1, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 85\n```\n\n\n:::\n\n```{.r .cell-code}\nsd(grades_data$Exam1, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 7.335498\n```\n\n\n:::\n\n```{.r .cell-code}\nIQR(grades_data$Exam1, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 10.5\n```\n\n\n:::\n\n```{.r .cell-code}\nrange(grades_data$Exam1, na.rm = TRUE) # 返回 min 和 max\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 75 95\n```\n\n\n:::\n\n```{.r .cell-code}\nquantile(grades_data$Exam1, probs = c(0.1, 0.9), na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>  10%  90% \n#> 76.8 93.2\n```\n\n\n:::\n\n```{.r .cell-code}\n# 计算 Exam2 的统计量\nmean(grades_data$Exam2, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 85.28571\n```\n\n\n:::\n\n```{.r .cell-code}\nmedian(grades_data$Exam2, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 84\n```\n\n\n:::\n\n```{.r .cell-code}\nsd(grades_data$Exam2, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 7.499206\n```\n\n\n:::\n\n```{.r .cell-code}\nIQR(grades_data$Exam2, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 8\n```\n\n\n:::\n\n```{.r .cell-code}\nrange(grades_data$Exam2, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 75 98\n```\n\n\n:::\n\n```{.r .cell-code}\nquantile(grades_data$Exam2, probs = c(0.1, 0.9), na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>  10%  90% \n#> 78.0 93.2\n```\n\n\n:::\n\n```{.r .cell-code}\n# 计算 FinalProject 的统计量\nmean(grades_data$FinalProject, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 87.28571\n```\n\n\n:::\n\n```{.r .cell-code}\nmedian(grades_data$FinalProject, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 88\n```\n\n\n:::\n\n```{.r .cell-code}\nsd(grades_data$FinalProject, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 7.825477\n```\n\n\n:::\n\n```{.r .cell-code}\nIQR(grades_data$FinalProject, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 11\n```\n\n\n:::\n\n```{.r .cell-code}\nrange(grades_data$FinalProject, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 75 96\n```\n\n\n:::\n\n```{.r .cell-code}\nquantile(grades_data$FinalProject, probs = c(0.1, 0.9), na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>  10%  90% \n#> 78.0 95.4\n```\n\n\n:::\n\n```{.r .cell-code}\n# (可选) 使用 dplyr::summarise 一次性计算多个统计量\ngrades_data %>%\n  summarise(\n    Mean_Exam1 = mean(Exam1, na.rm = TRUE),\n    Median_Exam1 = median(Exam1, na.rm = TRUE),\n    SD_Exam1 = sd(Exam1, na.rm = TRUE),\n    IQR_Exam1 = IQR(Exam1, na.rm = TRUE),\n    Min_Exam1 = min(Exam1, na.rm = TRUE),\n    Max_Exam1 = max(Exam1, na.rm = TRUE)\n    # 可以为 Exam2, FinalProject 添加类似的计算\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 1 × 6\n#>   Mean_Exam1 Median_Exam1 SD_Exam1 IQR_Exam1 Min_Exam1 Max_Exam1\n#>        <dbl>        <dbl>    <dbl>     <dbl>     <dbl>     <dbl>\n#> 1       84.9           85     7.34      10.5        75        95\n```\n\n\n:::\n:::\n\n\n\n\n\n**思考:** \\* 比较 `Exam1` 和 `Exam2` 的均值和中位数，哪个考试的平均表现似乎更好？哪个考试的成绩分布更受异常值影响（如果看均值和中位数的差异）？ \\* 比较 `Exam1` 和 `Exam2` 的标准差和 IQR，哪个考试的成绩更分散？\n\n## 6. `dplyr` 初步：`select()` 与 `filter()`\n\n练习使用 `dplyr` 选择特定的列和行。\n\n**任务:** 使用 `grades_data` Tibble 完成以下操作：\n\n1.  选择 `StudentID`, `Name`, 和 `FinalProject` 这三列。\n2.  选择除了 `Attendance` 之外的所有列。\n3.  筛选出 `Major` 为 \"Statistics\" 的所有学生记录。\n4.  筛选出 `Exam1` 成绩大于 85 分的学生记录。\n5.  筛选出 `Major` 为 \"CompSci\" **且** `Exam2` 成绩大于 80 分的学生记录。\n6.  筛选出 `Attendance` 为 \"Absent\" **或** `FinalProject` 成绩低于 80 分的学生记录。\n7.  **链式操作:** 筛选出 `Major` 为 \"Statistics\" 的学生，然后只选择他们的 `Name` 和 `FinalProject` 成绩。\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 1. 选择 StudentID, Name, FinalProject\ngrades_data %>% select(StudentID, Name, FinalProject)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 8 × 3\n#>   StudentID Name    FinalProject\n#>   <chr>     <chr>          <dbl>\n#> 1 S001      Alice             92\n#> 2 S002      Bob               85\n#> 3 S003      Charlie           75\n#> 4 S004      David             95\n#> 5 S005      Eve               NA\n#> 6 S006      Frank             96\n#> 7 S007      Grace             80\n#> 8 S008      Heidi             88\n```\n\n\n:::\n\n```{.r .cell-code}\n# 2. 选择除 Attendance 外的所有列\ngrades_data %>% select(-Attendance)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 8 × 6\n#>   StudentID Name    Major      Exam1 Exam2 FinalProject\n#>   <chr>     <chr>   <chr>      <dbl> <dbl>        <dbl>\n#> 1 S001      Alice   Statistics    85    88           92\n#> 2 S002      Bob     CompSci       92    NA           85\n#> 3 S003      Charlie Math          78    82           75\n#> 4 S004      David   Statistics    88    90           95\n#> 5 S005      Eve     CompSci       75    80           NA\n#> 6 S006      Frank   Statistics    95    98           96\n#> 7 S007      Grace   Math          NA    75           80\n#> 8 S008      Heidi   CompSci       81    84           88\n```\n\n\n:::\n\n```{.r .cell-code}\n# 3. 筛选 Major 为 \"Statistics\"\ngrades_data %>% filter(Major == \"Statistics\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 3 × 7\n#>   StudentID Name  Major      Exam1 Exam2 FinalProject Attendance\n#>   <chr>     <chr> <chr>      <dbl> <dbl>        <dbl> <chr>     \n#> 1 S001      Alice Statistics    85    88           92 Present   \n#> 2 S004      David Statistics    88    90           95 Present   \n#> 3 S006      Frank Statistics    95    98           96 Present\n```\n\n\n:::\n\n```{.r .cell-code}\n# 4. 筛选 Exam1 大于 85\ngrades_data %>% filter(Exam1 > 85)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 3 × 7\n#>   StudentID Name  Major      Exam1 Exam2 FinalProject Attendance\n#>   <chr>     <chr> <chr>      <dbl> <dbl>        <dbl> <chr>     \n#> 1 S002      Bob   CompSci       92    NA           85 Present   \n#> 2 S004      David Statistics    88    90           95 Present   \n#> 3 S006      Frank Statistics    95    98           96 Present\n```\n\n\n:::\n\n```{.r .cell-code}\n# 5. 筛选 Major 为 \"CompSci\" 且 Exam2 大于 80\n# 注意处理 Exam2 中的 NA，比较时 NA 会产生 NA 结果，filter 默认会移除结果为 NA 的行\ngrades_data %>% filter(Major == \"CompSci\" & Exam2 > 80)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 1 × 7\n#>   StudentID Name  Major   Exam1 Exam2 FinalProject Attendance\n#>   <chr>     <chr> <chr>   <dbl> <dbl>        <dbl> <chr>     \n#> 1 S008      Heidi CompSci    81    84           88 Present\n```\n\n\n:::\n\n```{.r .cell-code}\n# 6. 筛选 Attendance 为 \"Absent\" 或 FinalProject 低于 80\n# 同样注意 FinalProject 中的 NA\ngrades_data %>% filter(Attendance == \"Absent\" | FinalProject < 80)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 2 × 7\n#>   StudentID Name    Major   Exam1 Exam2 FinalProject Attendance\n#>   <chr>     <chr>   <chr>   <dbl> <dbl>        <dbl> <chr>     \n#> 1 S003      Charlie Math       78    82           75 Absent    \n#> 2 S005      Eve     CompSci    75    80           NA Absent\n```\n\n\n:::\n\n```{.r .cell-code}\n# 7. 链式操作：筛选 Statistics 专业，然后选择 Name 和 FinalProject\ngrades_data %>%\n  filter(Major == \"Statistics\") %>%\n  select(Name, FinalProject)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 3 × 2\n#>   Name  FinalProject\n#>   <chr>        <dbl>\n#> 1 Alice           92\n#> 2 David           95\n#> 3 Frank           96\n```\n\n\n:::\n:::\n\n\n\n\n\n## 7. 实验总结\n\n在本实验中，我们练习了从 CSV 文件导入数据，使用多种函数检查了数据结构，将分类变量转换为因子，计算了关键的描述性统计量（注意处理 NA），并使用 `dplyr` 的 `select` 和 `filter` 对数据进行了基本的筛选和子集提取。这些是进行任何数据分析前必不可少的数据熟悉和准备步骤。",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}